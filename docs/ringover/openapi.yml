openapi: 3.1.1
info:
  license:
    name: Proprietary – Contact us for usage terms
    url: https://www.ringover.com/contact
  description: |
    Welcome to Ringover Public API Documentation. Ringover REST API allows you to easily retrieve your phone information, access your contacts, users and groups and their properties. Our API is designed to answer your requests made via HTTP commands and to receive data with standard HTTP response codes.
    > Warning [Rate limit]: There is a 2-call per second limit applied to each request.
  version: "2.1.0"
  title: Ringover Public API
  x-logo:
    url: https://webcdn.ringover.com/app/img/misc/logo_app_redoc.png
    backgroundColor: "#FAFAFA"
    altText: Ringover Logo
  termsOfService: https://ringover.com/terms/
  contact:
    email: support@ringover.com
tags:
  - name: How to paginate?
    description: |
      In `calls`, `contacts`, `conversations`, `messages`, `blacklists` and `snooze logs`, when you have to retrieve a list of results, you might need to use a "pagination" system to break the results down into manageable batches. To do so, we advise you to use the offset-based pagination.  
      Using the `limit_offset` parameter allows you to skip a number of items. For instance, providing a 'limit_offset' X with a 'limit_count' Y will ignore the first X results, and the following Y results will be returned.
  - name: teams
    description: |
      The team object is a model of your Ringover team. It contains a list of related objects:
      - `numbers` and related information such as their type, country and prefix according to the country,
      - `users` and related information such as their user ID, team ID as well as personal data such as their first name, last name and email, 
      - `ivrs` and related information such as their ID and the `numbers` objects associated, 
      - `conferences` and related information such as their ID, name and tags (optional).
  - name: groups
    description: "The group object contains basic data about the group like its name, color, number of users. It also indicates if people can join and leave freely."
  - name: users
    description: |
      The `user` routes allows you to retrieve data from one or all of your users, create new users or delete them. It contains basic data such as the user's first name, last name and email as well as all phone `numbers` attributed to the user.
      > Warning: To get one or multiple users, their plannings and presences, the user must have the Users READ right with their API key and for the other Users routes, they must have the WRITE right.
  - name: numbers
    description: |
      The `number` object is a model of a phone number. Our different routes will allow you to retrieve data for all of your numbers or for one number specifically.
      > Warning: For these routes, the user must have the Numbers READ right with their API key.
  - name: ivrs
    description: |
      The `ivr` (interactive voice response) object is a model of a Ringover ivr. It contains a list of objects like `numbers` and `scenario`. Our different API routes will allow you to retrieve all of this information.
      > Warning: For these routes, the user must have the IVR READ right with their API key.
  - name: tags
    description: "The `tags` object used on Ringover contains basic data like the tag id, its name, its color, a description and its creation date."
  - name: conferences
    description: "The `conference` object is a model of a conference that you created on Ringover. It contains an ID, a name and a list of `numbers` objects, which are the numbers used to join the conference."
  - name: calls
    description: |
      The call object is a model of your calls with Ringover. The API permits data retrieval for all of your current or past calls. Some routes are available with the HTTP GET and POST methods, the latter allowing you to use more parameters to refine the query.
      > Warning: To get one or multiple calls, the user must have the Calls READ right with their API key and for the other calls routes, they must have the WRITE right.
  - name: campaigns
    description: |
      This section provides a comprehensive overview of how to manage your call campaigns.
      
      Whether you're looking to monitor, modify, or enhance your campaign workflows, the API offers a set of tools for interacting with campaign data.
      Here's what you can achieve:
      
      - Retrieve the list of campaigns, filterable by various parameters.
      - Assign Ringover users to specific campaigns.
      - Add or manage contacts associated with a campaign.
      - Start, stop, or reset campaigns dynamically.
      - Update campaign scripts to ensure consistent messaging.
      - Adjust the number of allowed call retries for specific campaigns.
      - Modify tags assigned to campaigns to enhance your tracking.
      - Manage numbers associated with campaigns, including: adding, updating, or removing them.
      - Extend the capabilities of your campaigns by adding custom columns (enriched data).
      
      Dive into the API endpoints detailed in this chapter to learn how to use these capabilities efficiently.
  - name: channels
    description: "A `channel` is an audio stream during a call with Ringover."
  - name: contacts
    description: |
      The `contacts` object contains essential data as well as a list of all phone `numbers` attributed to the contact.
      > Warning: To get one or multiple contacts, the user must have the Contacts READ right with their API key and for the other Contacts routes, they must have the WRITE right.
  - name: conversations
    description: |
      The `conversation` object is a model of a messaging conversation on Ringover (SMS and CHAT). In a conversation, only the last message is present in the structure of the object.
      > Warning: To get one or multiple conversations, the user must have the Conversations READ right with their API key and for the other Conversations routes, they must have the WRITE right.
  - name: messages
    description: |
      The `messages` are part of the conversation object. Messages operations include listing the messages of a conversation and archiving/unarchiving a message.
      > Warning: To get the list of messages, the user must have the Conversations READ right with their API key and for the other Messages routes, they must have the Conversations WRITE right.
  - name: sms
    description: "The `sms` object refers to operations regarding push SMS: a push SMS can be sent to a specific phone number."
  - name: profiles
    description: "The `profiles` object is a model of a user's profile created on Ringover. It contains two attributes : <em>id</em> (unique identifier of the profile) and <em>name</em>."
  - name: presences
    description: "The `presences` object retrieves information about a user like their planning, snooze status, connected device. It also allows you to know if they are in a call."
  - name: blacklist
    description: "The `blacklist` object contains information about your blacklisted phone numbers on Ringover."
  - name: webhook
    description: |
      Ringover uses webhooks to notify you any time that an event associated with your team occurs (ex: a new voicemail, the reception of a new message, a missed call...). A webhook is a URL that we call with a parameter that contains all the data about the event. It will allow you to create a <b>webhook handler</b> on your server in order to trigger specific actions in response to the event. You can configure your <b>webhooks</b> in the developer section of your Ringover dashboard.
      > Warning: The `ivr_id` in the response body of webhook routes is offset by 10000 for legacy reasons (e.g. an ivr_id 22000 in the dashboard will be returned as 12000).
  - name: callbacks
    description: "The `callbacks` object refers to Telecoms' operations: it allows you to manage a call between a user and a recipient."
  - name: surveys
    description: "The `surveys` object allows you to retrieve the number of answered surveys and their contents."
  - name: snoozes
    description: "The `snoozes` object allows you to retrieve the list of snoozes status."
  - name: transcriptions
    description: "The `transcriptions` object allows you to retrieve the list of transcriptions you can access."
  - name: empower
    description: |
      The `empower` routes allow you to retrieve call transcripts, moments and summaries for the calls you are allowed to see (if you have admin rights, you will be able to see all of your team's calls). The `callEmpower` object contains the result of the call processing by [Empower](https://www.ringover.com/sales-enablement-tool) AI servers.
      > Warning: To use Empower routes, the user must at least have the READ rights with their API key.
  - name: whatsapp
  - name: task
servers:
  - url: https://public-api.ringover.com/v2
    description: Production server (EU)
  - url: https://public-api-us.ringover.com/v2
    description: Production server (US)
security:
  - Authorization: []
paths:
  /teams:
    get:
      operationId: getTeams
      tags:
        - teams
      summary: Get full team object
      description: "This request allows you to get a complete `team` object that contains a list of `numbers`, `users`, `ivrs`, `conferences`, `tags` and `groups`."
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/team"
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /groups:
    get:
      operationId: getGroups
      tags:
        - groups
      summary: Get all groups from your team
      description: "This request allows you to retrieve the 100 first groups from your team."
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/group_list"
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /groups/{groupId}:
    get:
      operationId: getGroupsGroupid
      tags:
        - groups
      summary: Get a specific group from your team
      description: "This request allows you to retrieve data about a group."
      parameters:
        - in: path
          name: groupId
          description: The identifier of the group
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/group_full"
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: Group not found
        '500':
          description: Internal server error
  /groups/{groupId}/isjumper/toggle:
    patch:
      operationId: patchGroupsGroupidIsjumperToggle
      tags:
        - groups
      summary: Toggle free access to the group
      description: "Toggle the `is_jumper` parameter of a specific group: it allows users to leave and join the group freely. This corresponds to the `Free access` switch of the group in the dashboard."
      parameters:
        - in: path
          name: groupId
          description: The identifier of the group
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: Group not found
        '500':
          description: Internal server error
  /groups/{groupId}/users:
    post:
      operationId: postGroupsGroupidUsers
      tags:
        - groups
      summary: Add a user to a group
      description: "This request allows you to add a user to a group so that, for example, they have the same rights as other users already in the group. Make sure that it is possible to join the group freely (free access switch)."
      parameters:
        - in: path
          name: groupId
          description: The identifier of the group
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add_user_group'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: Group not found
        '500':
          description: Internal server error
    delete:
      operationId: deleteGroupsGroupidUsers
      tags:
        - groups
      summary: Remove a user from a group
      description: "This request allows you to remove a user from a group."
      parameters:
        - in: path
          name: groupId
          description: The identifier of the group
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: Group not found
        '500':
          description: Internal server error
  /groups/{groupId}/users/{userId}/ring_duration/{ringDuration}:
    patch:
      operationId: patchGroupsGroupidUsersUseridRing_durationRingduration
      tags:
        - groups
      summary: Patch the ring duration
      description: "This request allows you to patch the ring duration for a user in a group."
      parameters:
        - in: path
          name: groupId
          description: The identifier of the group
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: userId
          description: The identifier of the user
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: ringDuration
          description: The ring duration
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: Group not found
        '500':
          description: Internal server error
  /users:
    get:
      operationId: getUsers
      tags:
        - users
      summary: Get all users from a team
      description: "This request allows you to retrieve all the users on your team, and a list of their numbers for each. The size of the list is set on the attribute `list_count`."
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user_list"
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
    post:
      operationId: postUsers
      tags:
        - users
      summary: Create a user
      description: |
        This request allows you to create a new user with or without commitment from their email address and phone number (E.164 format).
        An invitation email will be sent to the user, they will have to confirm their account to log in to Ringover.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/new_user'
        required: true
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid body supplied
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
        '502':
          description: Bad gateway
  /users/{userId}:
    get:
      operationId: getUsersUserid
      tags:
        - users
      summary: Get a specific user
      description: "This request allows you to retrieve basic data about a user and all phone numbers assigned to them."
      parameters:
        - name: userId
          in: path
          description: The identifier of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user_full"
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error
    delete:
      operationId: deleteUsersUserid
      tags:
        - users
      summary: Delete a user
      description: "This request allows you to delete permanently a user from their unique identifier."
      parameters:
        - name: userId
          in: path
          description: The identifier of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error
        '502':
          description: Bad gateway
  /users/{userId}/profiles/{profileId}:
    post:
      operationId: postUsersUseridProfilesProfileid
      tags:
        - users
      summary: Update profile ID
      description: "This request allows you to update the user's profile by replacing it with the one corresponding to the id set in parameter."
      parameters:
        - name: userId
          in: path
          description: The identifier of the user
          required: true
          schema:
            type: integer
            format: int64
        - name: profileId
          in: path
          description: Profile ID to set
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error
        '502':
          description: Bad gateway
  /users/{userId}/plannings:
    get:
      operationId: getUsersUseridPlannings
      tags:
        - users
      summary: "Get user's plannings"
      description: |
        This request allows you to retrieve a user's planning information if the planning of the user is enabled in their settings. Otherwise, `is_planning` will indicate \"false\".
      parameters:
        - name: userId
          in: path
          description: The identifier of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user_plannings"
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error
    put:
      operationId: putUsersUseridPlannings
      tags:
        - users
      summary: "Set user's planning"
      description: "This request allows you to replace a user's entire planning with a new one (the planning of the user must be enabled in their settings)."
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/time_ranges"
        required: true
      parameters:
        - name: userId
          in: path
          description: The identifier of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '401':
          description: Token unauthorized
        '406':
          description: Not acceptable
        '500':
          description: Internal server error
  /users/{userId}/plannings/{day}:
    put:
      operationId: putUsersUseridPlanningsDay
      tags:
        - users
      summary: "Set user's planning of specific day"
      description: "This request allows you to replace a user's day planning with a new one (the planning of the user must be enabled in their settings)."
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/time_ranges_short"
        required: true
      parameters:
        - name: userId
          in: path
          description: The identifier of the user
          required: true
          schema:
            type: integer
            format: int64
        - name: day
          in: path
          description: The day of planning
          required: true
          schema:
            type: string
            enum:
              - monday
              - tuesday
              - wednesday
              - thursday
              - friday
              - saturday
              - sunday
      responses:
        '200':
          description: Successful operation
        '401':
          description: Token unauthorized
        '406':
          description: Not acceptable
        '500':
          description: Internal server error
  /users/{userId}/presences:
    get:
      operationId: getUsersUseridPresences
      tags:
        - presences
        - users
      summary: "Get user's presences"
      description: "This request allows you to retrieve a user's presences information."
      parameters:
        - name: userId
          in: path
          description: The identifier of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user_presences"
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error
  /users/{userId}/snooze/log:
    get:
      operationId: getUsersUseridSnoozeLog
      tags:
        - users
      summary: "Get user snooze log"
      description: "This request allows you to get a user's snooze log"
      parameters:
        - name: userId
          in: path
          description: The identifier of the user
          required: true
          schema:
            type: integer
            format: int64
        - name: limit_count
          in: query
          description: Restrict the number of returned rows
          schema:
            type: integer
            format: int64
            maximum: 1000
            example: 100
        - name: limit_offset
          in: query
          description: The amount of conversations ignored, not returned
          schema:
            type: integer
            format: int64
            example: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/snooze_log_list"
        '400':
          description: Invalid param supplied
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /users/{userId}/snooze:
    put:
      operationId: putUsersUseridSnooze
      tags:
        - users
      summary: "Set user's snooze status"
      description: "This request allows you to set a user's snooze status"
      parameters:
        - name: userId
          in: path
          description: The identifier of the user
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "meeting"
                duration:
                  type:
                    - integer
                    - 'null'
                  description: Duration of snooze in seconds
                  example: 3600
        required: true
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '406':
          description: Not acceptable
        '500':
          description: Internal server error
  /numbers:
    get:
      operationId: getNumbers
      tags:
        - numbers
      summary: Get all numbers
      description: |
        This request allows you to retrieve the `numbers` list for your whole team. The size of the list is set in the variable <em>list_count</em>. 
        The `is_available` filter is `true` by default and the other filters are `false` by default. 
        You must have the admin rights in order to use parameters.
      parameters:
        - name: is_user
          in: query
          description: Retrieves numbers belonging to a user
          schema:
            type: boolean
            example: false
        - name: is_ivr
          in: query
          description: Retrieves numbers used for an ivr
          schema:
            type: boolean
            example: false
        - name: is_fax
          in: query
          description: Retrieves the fax numbers
          schema:
            type: boolean
            example: false
        - name: is_conference
          in: query
          description: Retrieve the conferences numbers
          schema:
            type: boolean
            example: false
        - name: is_available
          in: query
          description: Retrieve available numbers. If the value of this filter is `false`, another filter must be set at `true`.
          schema:
            type: boolean
            example: false
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/number_list"
        '400':
          description: Invalid parameter supplied
        '401':
          description: Token unauthorized
        '204':
          description: Number list empty
        '500':
          description: Internal server error
  /numbers/{number}:
    get:
      operationId: getNumbersNumber
      tags:
        - numbers
      summary: Get number
      description: "This request allows you to retrieve information about an existing number. You simply have to set the phone number in the route (E.164 format)."
      parameters:
        - name: number
          in: path
          description: The identifier of the number
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/number"
        '400':
          description: Invalid number supplied
        '401':
          description: Token unauthorized
        '404':
          description: Number not found
        '500':
          description: Internal server error
  /ivrs:
    get:
      operationId: getIvrs
      tags:
        - ivrs
      summary: Get all ivrs from team
      description: "This request allows you to retrieve all your ivrs. The size of the list is set in the variable <em>list_count</em>."
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ivr_list"
        '204':
          description: Ivrs list empty
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /ivrs/{ivrId}:
    get:
      operationId: getIvrsIvrid
      tags:
        - ivrs
      summary: Get an ivr
      description: "This request allows you to retrieve the ivr corresponding to the identifier indicated in the route."
      parameters:
        - name: ivrId
          in: path
          description: The ivr identifier
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ivr"
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: ivr not found
        '500':
          description: Internal server error
  /ivrs/{ivrId}/scenarios:
    get:
      operationId: getIvrsIvridScenarios
      tags:
        - ivrs
      summary: Get all scenarios from a specific ivr
      description: "This request allows you to retrieve all the scenarios attached to the ivr indicated in the route. The size of the list is set in the variable <em>list_count</em>."
      parameters:
        - name: ivrId
          in: path
          description: The ivr identifier
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/scenario_list"
        '204':
          description: Scenario list empty
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /ivrs/{ivrId}/scenarios/{scenarioId}:
    get:
      operationId: getIvrsIvridScenariosScenarioid
      tags:
        - ivrs
      summary: Get a scenario by id from a specific ivr
      description: "This request allows you to retrieve a scenario's information by indicating in the route its identifier and that of its ivr."
      parameters:
        - name: ivrId
          in: path
          description: The ivr identifier
          required: true
          schema:
            type: integer
            format: int64
        - name: scenarioId
          in: path
          description: The scenario identifier
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/scenario"
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: Scenario not found
        '500':
          description: Internal server error
  /tags:
    get:
      operationId: getTags
      tags:
        - tags
      summary: Get all tags
      description: "This request allows you to retrieve all your tags. The size of the list is set in the variable <em>list_count</em>."
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tag_list"
        '204':
          description: Tag list empty
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
    post:
      operationId: postTags
      tags:
        - tags
      summary: Create a tag
      description: "This request allows you to create a tag."
      requestBody:
        description: a tag
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the tag
                  example: "mytag"
                color:
                  type: string
                  enum:
                    - "ff6b6b"
                    - "F06292"
                    - "BA68C8"
                    - "9575CD"
                    - "7986CB"
                    - "64B5F6"
                    - "4FC3F7"
                    - "4DD0E1"
                    - "4DB6AC"
                    - "81C784"
                    - "AED581"
                    - "DCE775"
                    - "FFD54F"
                    - "FFB74D"
                    - "FF8A65"
                    - "A1887F"
                    - "E0E0E0"
                    - "90A4AE"
                  example: "ff6b6b"
                description:
                  type: string
                  description: The description of the tag
                  example: "my tag description"
        required: true
      responses:
        '200':
          description: Successful operation
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /tags/{tagId}:
    get:
      operationId: getTagsTagid
      tags:
        - tags
      summary: Get a specific tag
      description: "This request allows you to retrieve the tag corresponding to the provided identifier."
      parameters:
        - name: tagId
          in: path
          description: The identifier of the tag
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tag"
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: Tag not found
        '500':
          description: Internal server error
  /conferences:
    get:
      operationId: getConferences
      tags:
        - conferences
      summary: Get all conferences from team
      description: "This request allows you to retrieve all the conferences you've set up. The size of the list is indicated in the variable list_count."
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/conference_list"
        '204':
          description: Tag list empty
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /conferences/{conferenceId}:
    get:
      operationId: getConferencesConferenceid
      tags:
        - conferences
      summary: Get a conference
      description: "This request allows you to retrieve a conference."
      parameters:
        - name: conferenceId
          in: path
          description: The identifier of the conference
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/conference"
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: Conference not found
        '500':
          description: Internal server error
  /conferences/{conferenceId}/pincode/{pincodeId}:
    patch:
      operationId: patchConferencesConferenceidPincodePincodeid
      tags:
        - conferences
      summary: Update pincode for specific conference
      description: "This request allows you to update the <em>pincode</em> of the conference indicated in the parameter. You have to set parameters directly in the URL."
      parameters:
        - name: conferenceId
          in: path
          description: The identifier of the conference
          required: true
          schema:
            type: integer
            format: int64
        - name: pincodeId
          in: path
          description: The identifier of the pincode
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '304':
          description: Pincode not changed
        '400':
          description: Invalid id supplied
        '404':
          description: Conference not found
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /calls:
    get:
      operationId: getCalls
      tags:
        - calls
      summary: Get all calls
      description: |
        This request allows you to retrieve your terminated calls. All the parameters are optional. For a more refined search, please refer to the POST method.
        > *Note: In the response, multiple items in the call list can have the same call ID. This behaviour occurs when a call is transferred or when it goes through a standard, you will notice changes in the `from_number/to_number` or `scenario_name/scenario_id` respectively.*
      parameters:
        - name: start_date
          in: query
          description: Used to create a time cursor. Must be used with end_date
          schema:
            type: string
            format: date-time
            example: "2020-06-27T00:00:00.53Z"
        - name: end_date
          in: query
          description: Used to create a time cursor. Must be used with start_date and the difference between the start_date and the end_date must not exceed 15 days.
          schema:
            type: string
            format: date-time
            example: "2020-07-27T00:00:00.53Z"
        - name: limit_count
          in: query
          description: Restrict the number of returned rows
          schema:
            type: integer
            format: int64
            maximum: 1000
        - name: limit_offset
          in: query
          description: Number of elements that will be ignored. The max value of this field is 9000.
          schema:
            type: integer
            format: int64
            example: 0
        - name: last_id_returned
          in: query
          description: The request will return <b>cdr_id</b> (call logs) prior to this one
          schema:
            type: integer
            format: int64
            example: 0
        - name: call_type
          in: query
          description: "Used to filter certain types of call. 'ANSWERED' filters answered calls. 'MISSED' filters missed calls. 'OUT' filters outgoing calls. 'VOICEMAIL' filters calls ending on voicemail."
          schema:
            type: string
        - name: ascending_order
          in: query
          description: "[Deprecated] The order of call logs"
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/calls_list"
        '204':
          description: Call list empty
        '400':
          description: Invalid parameter supplied
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
    post:
      operationId: postCalls
      tags:
        - calls
      summary: Get all calls
      description: |
        This request is used to retrieve detailed data of your terminated calls according to the following filters. None of the filters are mandatory but some depends on others. Please check the elements' descriptions.
        > *Note: In the response, multiple items in the call list can have the same call ID. This behaviour occurs when a call is transferred or when it goes through a standard, you will notice changes in the `from_number/to_number` or `scenario_name/scenario_id` respectively.*
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/calls_filter'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/calls_list"
        '204':
          description: Call list empty
        '400':
          description: Invalid Json supplied
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /calls/{callId}:
    get:
      operationId: getCallsCallid
      tags:
        - calls
      summary: Get call by id
      description: "This request allows you to retrieve data about the terminated call set in the route parameter. The array <em>list</em> contains all the logs generated by the call, (for example in the case of call forwarding)."
      parameters:
        - name: callId
          in: path
          description: The identifier of the call
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/calls_list_id"
        '204':
          description: Call list empty
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: Call not found
        '500':
          description: Internal server error
    delete:
      operationId: deleteCallsCallid
      tags:
        - calls
      summary: Archive call
      description: "This request allows you to archive a call (Rights monitoring enable = Dashboard effect | Rights monitoring disable = MyRingover effect)."
      parameters:
        - name: callId
          in: path
          description: The identifier of the call
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: Call not found
        '500':
          description: Internal server error
  /calls/{callId}/channels/{channelId}:
    delete:
      operationId: deleteCallsCallidChannelsChannelid
      tags:
        - calls
      summary: Archive call with channelID
      description: "This request allows you to archive a call with channelID (Rights monitoring enable = Dashboard effect | Rights monitoring disable = MyRingover effect)."
      parameters:
        - name: callId
          in: path
          description: The identifier of the call
          required: true
          schema:
            type: string
        - name: channelId
          in: path
          description: The identifier of the channel
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: Call not found
        '500':
          description: Internal server error
  /calls/{callId}/surveys:
    get:
      operationId: getCallsCallidSurveys
      tags:
        - calls
        - surveys
      summary: Get all survey answers for the callId indicated in the route
      parameters:
        - name: callId
          in: path
          description: The identifier of the call
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/surveys_list"
        '204':
          description: No surveys available
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: Call not found
        '500':
          description: Internal server error
  /calls/current:
    post:
      operationId: postCallsCurrent
      tags:
        - calls
      summary: Get all current calls
      description: "This request allows you to retrieve all currents calls. This route is only available with the <em>POST</em> method. The current_calls_filter object must be sent."
      requestBody:
        description: current_calls_filter object must be set
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/current_calls_filter'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/current_calls_list"
        '204':
          description: Current call list empty
        '400':
          description: Invalid Json supplied
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error

  /campaigns/call:
    get:
      operationId: getCampaignsCall
      tags:
        - campaigns
      summary: Get list of campaign CALL List
      description: Retrieve a list of campaigns calllist
      parameters:
        - name: limit_count
          in: query
          description: Restrict the number of returned rows
          schema:
            type: integer
            format: int64
        - name: limit_offset
          in: query
          description: Restrict the number of returned rows
          schema:
            type: integer
            format: int64
        - name: ascending_order
          in: query
          description: If set to asc, return by creation date ascending
          schema:
            type: string
        - name: is_running
          in: query
          description: If set return running campaigns
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/campaign_calllist_list"
        '204':
          description: Successful operation but no content
        '400':
          description: Bad request
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /campaigns/call/user:
    get:
      operationId: getCampaignsCallUser
      tags:
        - campaigns
      summary: Get a list of CALL List campaigns
      description: Retrieve campaigns that are started
      parameters:
        - name: limit_count
          in: query
          description: Restrict the number of returned rows
          schema:
            type: integer
            format: int64
        - name: limit_offset
          in: query
          description: Restrict the number of returned rows
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/campaign_calllist_list"
        '204':
          description: Successful operation but no content
        '400':
          description: Bad request
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /campaigns/call/{campaignscalllistuuid}:
    get:
      operationId: getCampaignsCallCampaignscalllistuuid
      tags:
        - campaigns
      summary: Get a specified campaign calllist
      description: Retrieve data about a campaign calllist
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/campaign_calllist_full"
        '201':
          description: no content
        '400':
          description: Invalid ID supplied
        '401':
          description: Token unauthorized
        '404':
          description: campaign calllist not found
        '500':
          description: Internal server error
  /campaigns/call/{campaignscalllistuuid}/start:
    patch:
      operationId: patchCampaignsCallCampaignscalllistuuidStart
      tags:
        - campaigns
      summary: Start a campaign CALL List
      description: Start a campaign CALL List
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Start date
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/campaign_call_start'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '401':
          description: Token unauthorized
        '403':
          description: No numbers register for the campaign
        '404':
          description: Group not found
        '500':
          description: Internal server error
  /campaigns/call/{campaignscalllistuuid}/start/edit:
    patch:
      operationId: patchCampaignsCallCampaignscalllistuuidStartEdit
      tags:
        - campaigns
      summary: Edit campaign start date CALL List
      description: Edit campaign start date CALL List
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Start date
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/campaign_call_start'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '401':
          description: Token unauthorized
        '403':
          description: No numbers register for the campaign
        '500':
          description: Internal server error
  /campaigns/call/{campaignscalllistuuid}/stop:
    patch:
      operationId: patchCampaignsCallCampaignscalllistuuidStop
      tags:
        - campaigns
      summary: Stop a campaign CALL List
      description: Stop a campaign CALL List
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /campaigns/call/{campaignscalllistuuid}/reset:
    post:
      operationId: postCampaignsCallCampaignscalllistuuidReset
      tags:
        - campaigns
      summary: Reset a campaign
      description: Put everything back to zero
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Campaign reset
        '400':
          description: Invalid ID supplied
        '401':
          description: Token unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /campaigns/call/{campaignscalllistuuid}/numbers:
    get:
      operationId: getCampaignsCallCampaignscalllistuuidNumbers
      tags:
        - campaigns
      summary: get the queue of numbers for a specific campaign CALL List
      description: get the queue of numbers for a specific campaign CALL List
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
        - name: limit_count
          in: query
          description: Restrict the number of returned rows
          schema:
            type: integer
            format: int64
        - name: limit_offset
          in: query
          description: Restrict the number of returned rows
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/campaign_calllist_numbers_list"
        '400':
          description: Invalid ID supplied
        '401':
          description: Token unauthorized
        '404':
          description: Group not found
        '500':
          description: Internal server error
    post:
      operationId: postCampaignsCallCampaignscalllistuuidNumbers
      tags:
        - campaigns
      summary: Add number(s) to the queue of specific campaign CALL List
      description: Add number(s) to the queue of specific campaign CALL List
      requestBody:
        description: add a list of number(s)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/campaign_calllist_add_numbers"
        required: true
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/campaign_calllist_add_numbers_response"
        '304':
          description: Not Modified
        '400':
          description: Invalid ID supplied
        '401':
          description: Token unauthorized
        '404':
          description: Group not found
        '500':
          description: Internal server error
    delete:
      operationId: deleteCampaignsCallCampaignscalllistuuidNumbers
      tags:
        - campaigns
      summary: Delete number(s) from the queue of specific campaign CALL List
      description: Delete number(s) from the queue of specific campaign CALL List
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
        - name: to_numbers
          in: query
          required: true
          description: The list of mobile phone numbers
          schema:
            type: array
            items:
              type: integer
              format: int64
            minItems: 1
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '401':
          description: Token unauthorized
        '404':
          description: Group not found
        '500':
          description: Internal server error
    patch:
      operationId: patchCampaignsCallCampaignscalllistuuidNumbers
      tags:
        - campaigns
      summary: Update number(s) from the queue of specific campaign CALL List
      description: Update number(s) from the queue of specific campaign CALL List
      requestBody:
        description: update a list of number(s)
        content:
          application/json:
            schema:
              type: object
              properties:
                to_numbers:
                  description: The list of mobile phone numbers
                  type: array
                  items:
                    type: object
                    properties:
                      to_number:
                        type: integer
                        format: e164
                      json_csv_infos:
                        type: string
                        format: json
                        description: |
                          Contains data related to the number.
                          json_csv_infos must follow the schema:
                            {"company": "", "firstname": "", "lastname": "", "social_data": [{"optionalField": ""}, ...]}
                          The fields "company", "firstname", "lastname" and "social_data" are required.
                          The field "social_data" is an array of objects, each containing a key-value pair of type string.
                          All numbers' json_csv_infos must have the same fields in "social_data".
                        example: '{"company": "Ringover", "firstname": "John", "lastname": "Doe", "social_data": [{"country": "FR"}, {"city": "Paris"}]}'
        required: true 
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '401':
          description: Token unauthorized
        '404':
          description: Group not found
        '500':
          description: Internal server error
  /campaigns/call/{campaignscalllistuuid}/numbers/columns:
    post:
      operationId: postCampaignsCallCampaignscalllistuuidNumbersColumns
      tags:
        - campaigns
      summary: Add column to the numbers of a specific campaign CALL List
      description:
        Add column to the numbers of a specific campaign CALL List.
        The column will be added to the 'social_data' field of the numbers.
        The column name can't be used in or out of the 'social_data' field.
        Will also add a log of the operation (c.f. /campaigns/call/{campaignscalllistuuid}/logs).
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/campaign_calllist_numbers_add_columns"
        required: true
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
        '400':
          description:
            Invalid request (empty name, invalid numbers).
            Column name already exists.
        '401':
          description: Token unauthorized
        '404':
          description: Campaign not found
        '500':
          description: Internal server error
    delete:
      operationId: deleteCampaignsCallCampaignscalllistuuidNumbersColumns
      tags:
        - campaigns
      summary: Delete column of the numbers of a specific campaign CALL List
      description:
        Delete column of the numbers of a specific campaign CALL List.
        The column will be deleted from the 'social_data' field of the numbers.
        Will also add a log of the operation (c.f. /campaigns/call/{campaignscalllistuuid}/logs).
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
        - name: name
          in: query
          required: true
          description: Name of the column to delete
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description:
            Invalid request (empty name).
            Column name doesn't exist.
        '401':
          description: Token unauthorized
        '404':
          description: Campaign not found
        '500':
          description: Internal server error
  /campaigns/call/{campaignscalllistuuid}/numbers/columns/rename:
    patch:
      operationId: patchCampaignsCallCampaignscalllistuuidNumbersColumnsRename
      tags:
        - campaigns
      summary: Rename column of the numbers of a specific campaign CALL List
      description:
        Rename column of the numbers of a specific campaign CALL List.
        The column will be renamed in the 'social_data' field of the numbers.
        The column can't be renamed to a name that already exists both in or out of 'social_data'.
        Will also add a log of the operation (c.f. /campaigns/call/{campaignscalllistuuid}/logs).
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/campaign_calllist_number_rename_column"
        required: true
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
        '400':
          description:
            Invalid request (empty old_name, empty new_name).
            Column old_name doesn't exist.
            Column new_name already exists.
        '401':
          description: Token unauthorized
        '404':
          description: Campaign not found
        '500':
          description: Internal server error
  /campaigns/call/{campaignscalllistuuid}/numbers/columns/switch:
    patch:
      operationId: patchCampaignsCallCampaignscalllistuuidNumbersColumnsSwitch
      tags:
        - campaigns
      summary: Switch columns of the numbers of a specific campaign CALL List
      description:
        Switch columns of the numbers of a specific campaign CALL List.
        Will also add a log of the operation (c.f. /campaigns/call/{campaignscalllistuuid}/logs).
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/campaign_calllist_number_switch_column"
        required: true
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
        '400':
          description:
            Invalid request (empty column1.name, empty column2.name, same name for both columns).
            column1 or column2 don't exist.
        '401':
          description: Token unauthorized
        '404':
          description: Campaign not found
        '500':
          description: Internal server error
  /campaigns/call/{campaignscalllistuuid}/name/{newname}:
    patch:
      operationId: patchCampaignsCallCampaignscalllistuuidNameNewname
      tags:
        - campaigns
      summary: update the name of specific campaign CALL List
      description: update the name of specific campaign CALL List
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: newname
          description: The new name of the campaign calllist
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '401':
          description: Token unauthorized
        '404':
          description: Group not found
        '500':
          description: Internal server error
  /campaigns/call/{campaignscalllistuuid}/maxretry/{newMaxRetry}:
    patch:
      operationId: patchCampaignsCallCampaignscalllistuuidMaxretryNewmaxretry
      tags:
        - campaigns
      summary: update the max retry of a specific campaign CALL List
      description: update the max retry of specific campaign CALL List and all associated numbers
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: newMaxRetry
          description: The new number of max retry attempts (maxRetry) of the campaign calllist
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '401':
          description: Token unauthorized
        '404':
          description: Group not found
        '500':
          description: Internal server error
  /campaigns/call/{campaignscalllistuuid}/groups:
    get:
      operationId: getCampaignsCallCampaignscalllistuuidGroups
      tags:
        - campaigns
      summary: get the groups for a specific campaign CALL List
      description: get the groups for a specific campaign CALL List
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
        - name: limit_count
          in: query
          description: Restrict the number of returned rows
          schema:
            type: integer
            format: int64
        - name: limit_offset
          in: query
          description: Restrict the number of returned rows
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/campaign_calllist_groups_list"
        '400':
          description: Invalid ID supplied
        '401':
          description: Token unauthorized
        '404':
          description: Group not found
        '500':
          description: Internal server error
    post:
      operationId: postCampaignsCallCampaignscalllistuuidGroups
      tags:
        - campaigns
      summary: Add group(s) to the specific campaign CALL List
      description: Add group(s) to the specific campaign CALL List
      requestBody:
        description: add a list of groups
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/campaign_calllist_groups_create"
        required: true
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/campaign_calllist_groups_create_response"
        '400':
          description: Invalid ID supplied
        '401':
          description: Token unauthorized
        '404':
          description: Group not found
        '500':
          description: Internal server error
    delete:
      operationId: deleteCampaignsCallCampaignscalllistuuidGroups
      tags:
        - campaigns
      summary: Delete group(s)from the specific campaign CALL List
      description: Delete group(s)from the specific campaign CALL List
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
        - name: to_groups
          in: query
          description: The identifiers of group
          schema:
            type: array
            items:
              type: integer
              format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/campaign_calllist_groups_delete_response"
        '400':
          description: Invalid ID supplied
        '401':
          description: Token unauthorized
        '404':
          description: Group not found
        '500':
          description: Internal server error
  /campaigns/call/{campaignscalllistuuid}/users:
    get:
      operationId: getCampaignsCallCampaignscalllistuuidUsers
      tags:
        - campaigns
      summary: get the users for a specific campaign CALL List
      description: get the users for a specific campaign CALL List
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
        - name: limit_count
          in: query
          description: Restrict the number of returned rows
          schema:
            type: integer
            format: int64
        - name: limit_offset
          in: query
          description: Restrict the number of returned rows
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/campaign_calllist_users_list"
        '400':
          description: Invalid ID supplied
        '401':
          description: Token unauthorized
        '404':
          description: Group not found
        '500':
          description: Internal server error
    post:
      operationId: postCampaignsCallCampaignscalllistuuidUsers
      tags:
        - campaigns
      summary: Add user(s) to the specific campaign CALL List
      description: Add user(s) to the specific campaign CALL List
      requestBody:
        description: add a list of users
        content:
          application/json:
            schema:
              type: object
              properties:
                to_Users:
                  type: array
                  items:
                    type: integer
        required: true
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  Users_added_in_queue:
                    type: array
                    items:
                      type: integer
                  Users_already_in_queue:
                    type: array
                    items:
                      type: integer
        '400':
          description: Invalid ID supplied
        '401':
          description: Token unauthorized
        '404':
          description: Group not found
        '500':
          description: Internal server error
    delete:
      operationId: deleteCampaignsCallCampaignscalllistuuidUsers
      tags:
        - campaigns
      summary: Delete user(s)from the specific campaign CALL List
      description: Delete user(s) from the specific campaign CALL List
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
        - name: to_Users
          in: query
          description: The identifiers of user
          schema:
            type: array
            items:
              type: integer
              format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  Users_deleted_from_queue:
                    type: array
                    items:
                      type: integer
                  Users_not_in_queue:
                    type: array
                    items:
                      type: integer
        '400':
          description: Invalid ID supplied
        '401':
          description: Token unauthorized
        '404':
          description: Group not found
        '500':
          description: Internal server error
  /campaigns/call/{campaignscalllistuuid}/tags:
    put:
      operationId: putCampaignsCallCampaignscalllistuuidTags
      tags:
        - campaigns
      summary: update the tag list of a specific campaign CALL List
      description: update the tag list of a specific campaign CALL List
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  type: array
                  items:
                    type: integer
              example:
                tags:
                  - 966
        required: true
      responses:
        '200':
          description: Successful operation
        '304':
          description: Not modified
        '400':
          description: Invalid ID supplied
        '401':
          description: Token unauthorized
        '404':
          description: Tag not found
        '500':
          description: Internal server error
    delete:
      operationId: deleteCampaignsCallCampaignscalllistuuidTags
      tags:
        - campaigns
      summary: delete all tags of a specific campaign CALL List
      description: delete all tags of a specific campaign CALL List
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
        '304':
          description: Not modified
        '400':
          description: Invalid ID supplied
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /campaigns/call/{campaignscalllistuuid}/tags/{tagID}:
    delete:
      operationId: deleteCampaignsCallCampaignscalllistuuidTagsTagid
      tags:
        - campaigns
      summary: delete all tags of a specific campaign CALL List
      description: delete all tags of a specific campaign CALL List
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: tagID
          description: The identifier of the tag
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '401':
          description: Token unauthorized
        '404':
          description: Tag not found
        '500':
          description: Internal server error
  /campaigns/call/{campaignscalllistuuid}/script:
    put:
      operationId: putCampaignsCallCampaignscalllistuuidScript
      tags:
        - campaigns
      summary: assigns a script_uuid
      description: if body has no script_uuid and campaign does, it removes the link
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: If filled, the uuid of the script to link, if empty unlink
        content:
          application/json:
            schema:
              type: object
              properties:
                script_uuid:
                  type: string
                  example: 1a7a5639-3818-4b0e-9285-f6b3795f8db4
        required: false
      responses:
        '200':
          description: Script linked / unlinked
        '400':
          description: Invalid ID supplied
        '401':
          description: Token unauthorized
        '404':
          description: Group not found
        '500':
          description: Internal server error
  /campaigns/call/{campaignscalllistuuid}/logs:
    get:
      operationId: getCampaignsCallCampaignscalllistuuidLogs
      tags:
        - campaigns
      summary: Get all the logs about a campaign
      description: This is getting all the history
      parameters:
        - in: path
          name: campaignscalllistuuid
          description: The identifier of the campaign calllist
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Campaign reset
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/logs"
        '400':
          description: Invalid ID supplied
        '401':
          description: Token unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /public/tasks/team:
    post:
      operationId: postPublicTasksTeam
      tags:
        - task
      summary: "Get team tasks"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/team_task_request"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/task"
        '400':
          description: Invalid request
        '401':
          description: Token unauthorized
        '403':
          description: User is not from your team or Caller is not technical
        '500':
          description: Internal server error
  /public/tasks/team/create_batch:
    post:
      operationId: postPublicTasksTeamCreate_batch
      tags:
        - task
      summary: "Create a batch of tasks from a list of numbers"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/create_task_batch"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
        '204':
          description: No content
        '400':
          description: Invalid request
        '401':
          description: Token unauthorized
        '403':
          description: User is not from your team or Caller is not technical
        '500':
          description: Internal server error
  /transcriptions:
    get:
      operationId: getTranscriptions
      tags:
        - transcriptions
      summary: Get transcriptions
      description: |
        Retrieves your team's transcriptions.
        
        For each transcription, in the items of the array of the <em>transcription_data.speeches</em> field, the field <em>channelId</em> takes one of the following values:
        - <em>1</em> for the caller emitting the call
        - <em>0</em> for the callee receiving the call

        If the call is received by a Ringover user while the call is emitted by a call member that is not a registered contact, the <em>contact</em> field will be <em>null</em>.
        
        The maximum rows returned has to be set in the parameter <em>limit_count</em> (limited to 1000 rows). All the parameters are optional.
      parameters:
        - name: limit_count
          in: query
          description: Restrict the number of returned rows
          schema:
            type: integer
            format: int64
            maximum: 1000
            example: 100
        - name: limit_offset
          in: query
          description: The amount of transcriptions ignored, not returned
          schema:
            type: integer
            format: int64
            example: 0
        - name: audio_duration_from
          in: query
          description: Used to filter out calls under a certain duration
          schema:
            type: integer
            format: int64
            example: 0
        - name: audio_duration_to
          in: query
          description: Used to filter out calls over a certain duration
          schema:
            type: integer
            format: int64
            example: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transcription_list"
        '204':
          description: Contact list empty
        '400':
          description: Invalid param supplied
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error

  /transcriptions/{callId}:
    get:
      operationId: getTranscriptionsCallid
      tags:
        - transcriptions
      summary: Get transcription by callId
      description: |
        Retrieves one single transcription by its Call ID.

        For the returned transcription, in the items of the array of the <em>transcription_data.speeches</em> field, the field <em>channelId</em> takes one of the following values:
        - <em>1</em> for the caller emitting the call
        - <em>0</em> for the callee receiving the call

        If the call is received by a Ringover user while the call is emitted by a call member that is not a registered contact, the <em>contact</em> field will be <em>null</em>.
      parameters:
        - name: callId
          in: path
          description: The identifier of the call
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transcription_list"
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: Transcription not found
        '500':
          description: Internal server error

  /empower/calls:
    get:
      operationId: getEmpowerCalls
      tags:
        - empower
      summary: Get multiple Call objects using the query parameters as a filter
      parameters:
        - in: query
          name: call_source
          description: call source (multiple values can be used and separated by a semicolon (;))
          required: false
          schema:
            type: string
        - in: query
          name: call_direction
          description: call direction
          required: false
          schema:
            type: string
            enum: [in, out]
        - in: query
          name: call_date_from
          description: call "from" date
          required: false
          schema:
            type: string
        - in: query
          name: call_date_to
          description: call "to" date
          required: false
          schema:
            type: string
        - in: query
          name: creation_date_from
          description: call object creation "from" date
          required: false
          schema:
            type: string
        - in: query
          name: creation_date_to
          description: call object creation "to" date
          required: false
          schema:
            type: string
        - in: query
          name: audio_duration_from
          description: call audio duration "from" in seconds
          required: false
          schema:
            type: number
        - in: query
          name: audio_duration_to
          description: call audio duration "to" in seconds
          required: false
          schema:
            type: number
        - in: query
          name: language
          description: call languages (multiple values can be used and separated by a semicolon (;))
          required: false
          schema:
            type: string
        - in: query
          name: favorite
          description: call favorite
          required: false
          schema:
            type: boolean
        - in: query
          name: state
          description: call states (multiple values can be used and separated by a semicolon (;))
          required: false
          schema:
            type: string
            enum: [pending, done, error, planified, invalid]
        - in: query
          name: moment_id
          description: call moment_id (multiple values can be used and separated by a semicolon (;))
          required: false
          schema:
            type: string
        - in: query
          name: user_id
          description: user_id (multiple values can be used and separated by a semicolon (;))
          schema:
            type: string
          required: false
        - in: query
          name: phone_number
          description: phone numbers (multiple values can be used and separated by a semicolon (;))
          required: false
          schema:
            type: string
        - in: query
          name: speaker_type
          description: speaker type
          required: false
          schema:
            type: string
            enum: [client, agent]
        - in: query
          name: mood_label
          description: mood labels (multiple values can be used and separated by a semicolon (;))
          required: false
          schema:
            type: string
            enum: [positive, negative, neutral]
        - in: query
          name: tags
          description: tag ids (multiple values can be used and separated by a semicolon (;))
          required: false
          schema:
            type: string
        - in: query
          name: sort_order
          description: the sort order (default='DESC')
          required: false
          schema:
            type: string
            enum: [DESC, ASC]
        - in: query
          name: offset
          description: pagination offset
          required: false
          schema:
            type: integer
        - in: query
          name: limit
          description: the number of calls to get
          required: false
          schema:
            type: integer
        - in: query
          name: search_text
          description: text that the transcription should contains
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getCallEmpowerResBody'
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /empower/platform/{platformName}/channel/{channelID}:
    get:
      operationId: getEmpowerPlatformPlatformnameChannelChannelid
      tags:
        - empower
      summary: get a call uuid
      parameters:
        - name: platformName
          in: path
          description: "Name of the platform on which the call took place"
          required: true
          schema:
            type: string
        - name: channelID
          in: path
          description: "Channel ID of the call"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                format: uuid
        '400':
          description: Missing parameter(s)
        '404':
          description: Not found
        '500':
          description: Internal server error
  /empower/chat:
    post:
      operationId: postEmpowerChat
      tags:
        - empower
      summary: "Send a chat message"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_history:
                  type: array
                  description: "Conversation history (array of ChatHistoryItem objects). (optional)"
                  items:
                    $ref: '#/components/schemas/ChatHistoryItem'
                call_id:
                  type: string
                  description: "Unique identifier for the call."
                related_to:
                  type: array
                  description: "List of related call IDs (optional)."
                  items:
                    type: integer
                related_meet:
                  type:
                    - string
                    - 'null'
                  description: "Identifier of an associated meeting (optional)."
                message:
                  type: string
                  description: "Chat message to be sent."
                transcription:
                  type: array
                  description: "Array of transcription segments. (optional)"
                  items:
                    type: string
                user_id:
                  type: integer
                  description: "User identifier required if checking phone number relationships."
              required:
                - chat_history
                - call_id
                - message
                - transcription
                - user_id
      responses:
        '200':
          description: "Successful operation, returns the LLM response and the transcriptions used."
          content:
            application/json:
              schema:
                type: object
                properties:
                  transcription:
                    type: array
                    description: "List of transcriptions considered."
                    items:
                      type: string
                  response:
                    type: string
                    description: "Response generated by the LLM."
        '400':
          description: "Bad request (missing or invalid parameters)."
        '500':
          description: "Internal server error."

  /empower/call/{callUUID}:
    get:
      operationId: getEmpowerCallCalluuid
      tags:
        - empower
      summary: Get a Call Object by "call_uuid"
      parameters:
        - name: callUUID
          in: path
          description: Call unique Identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/callEmpower'
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /empower/call/{callUUID}/moments:
    get:
      operationId: getEmpowerCallCalluuidMoments
      tags:
        - empower
      summary: Get a Call moment by "call_uuid"
      parameters:
        - name: callUUID
          in: path
          description: Call unique Identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/moment'
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /empower/call/{callUUID}/summary:
    get:
      operationId: getEmpowerCallCalluuidSummary
      tags:
        - empower
      summary: Get chatGPT summary of a Call by "call_uuid"
      parameters:
        - name: callUUID
          in: path
          description: Call unique Identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  summary:
                    type: array
                    items:
                      $ref: '#/components/schemas/summary'
                  recap:
                    $ref: '#/components/schemas/recap'
        '400':
          description: Bad request
        '404':
          description: Not found
        '500':
          description: Internal server error
  /empower/summary/{summaryID}:
    get:
      operationId: getEmpowerSummarySummaryid
      tags:
        - empower
      summary: retrieve a summary
      description: retrieve a summary
      parameters:
        - name: summaryID
          in: path
          description: summary unique Identifier
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  summary:
                    $ref: '#/components/schemas/demo_summary_response'
        '400':
          description: Invalid id
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /empower/call:
    post:
      summary: Retrieve call summaries based on date range or user ID
      description: |
        This endpoint retrieves a summary of calls for a specified user within a given date range. 
        It requires permissions associated with the user's token and includes optional limits and offsets.
      operationId: getSummaryByDateOrUserID
      tags:
        - empower
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                start_date:
                  type: string
                  format: date-time
                  description: The start date for filtering calls (optional).
                end_date:
                  type: string
                  format: date-time
                  description: The end date for filtering calls (optional).
                user_id:
                  type: integer
                  description: The ID of the user for whom the summary is requested (optional).
                limit:
                  type: integer
                  description: Limit the number of calls returned. Defaults to 10 if not provided (max 10).
                  example: 10
                offset:
                  type: integer
                  description: Offset for pagination. Use this to skip a number of calls.
                  example: 0
              required:
                - start_date
                - end_date
                - user_id
                - limit
                - offset
      responses:
        '200':
          description: A list of call summaries.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    recap:
                      type: object
                      properties:
                        summary:
                          type: object
                          properties:
                            french:
                              type: string
                              description: Recap summary in French.
                            english:
                              type:
                                - string
                                - 'null'
                              description: Recap summary in English.
                            spanish:
                              type:
                                - string
                                - 'null'
                              description: Recap summary in spanish.
                        type:
                          type: string
                          description: Type of call.
                        important:
                          type: boolean
                          description: Indicates if the call is marked as important.
                        importance_score:
                          type: integer
                          description: Importance score of the call.
                        review_reasons:
                          type: array
                          items:
                            type: string
                          description: Reasons for review.
                        customer_satisfaction_score:
                          type:
                            - integer
                            - 'null'
                        information_accuracy:
                          type:
                            - string
                            - 'null'
                        politeness_professionalism:
                          type: boolean
                        call_reasons:
                          type: array
                          items:
                            type: string
                        pain_points:
                          type: array
                          items:
                            type: string
                        follow_up_actions:
                          type: array
                          items:
                            type: string
                        resolution_steps:
                          type: array
                          items:
                            type: string
                        call_outcome:
                          type: string
                          description: Outcome of the call.
                        customer_sentiment:
                          type: string
                          description: Sentiment of the customer.
                        sales_opportunities:
                          type: array
                          items:
                            type: string
                        call_rating:
                          type: integer
                          description: Rating of the call.
                    call_score:
                      type: integer
                      description: Score of the call.
                    moments:
                      type: array
                      items:
                        $ref: '#/components/schemas/moment'
                    transcription:
                      type: object
                      properties:
                        duration:
                          type: number
                          format: float
                          description: Duration of the transcription.
                        num_channels:
                          type:
                            - integer
                            - 'null'
                        speeches:
                          type: array
                          items:
                            type: object
                            properties:
                              channelId:
                                type: integer
                              start:
                                type: number
                                format: float
                              end:
                                type: number
                                format: float
                              duration:
                                type: number
                                format: float
                              text:
                                type: string
                              words:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    text:
                                      type: string
                                    start:
                                      type: number
                                      format: float
                                    end:
                                      type: number
                                      format: float
                        text:
                          type:
                            - string
                            - 'null'
                        prediction_time:
                          type: number
                          format: float
                          description: Prediction time.
        '204':
          description: No content found.
        '400':
          description: Bad request, often due to validation errors (e.g., `start_date` after `end_date` or `limit` > 10).
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "start date is after end date"
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
  /channels/{channelId}/events/mute/toggle:
    post:
      operationId: postChannelsChannelidEventsMuteToggle
      tags:
        - channels
      summary: Event to enable/disable mute for specific channel
      description: Event to enable/disable mute for specific channel
      parameters:
        - name: channelId
          in: path
          description: The identifier of the channel
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successfully processed and the event is applied
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: Channel not found
        '500':
          description: Internal server error
        '502':
          description: Bad gateway
  /channels/{channelId}/events/hold/toggle:
    post:
      operationId: postChannelsChannelidEventsHoldToggle
      tags:
        - channels
      summary: Event to enable/disable hold for specific channel
      description: Event to enable/disable hold for specific channel
      parameters:
        - name: channelId
          in: path
          description: The identifier of the channel
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successfully processed and the event is applied
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: Channel not found
        '500':
          description: Internal server error
        '502':
          description: Bad gateway
  /channels/{channelId}/events/record/toggle:
    post:
      operationId: postChannelsChannelidEventsRecordToggle
      tags:
        - channels
      summary: Event to enable/disable record for specific channel
      description: Event to enable/disable record for specific channel
      parameters:
        - name: channelId
          in: path
          description: The identifier of the channel
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successfully processed and the event is applied
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: Channel not found
        '500':
          description: Internal server error
        '502':
          description: Bad gateway
  /channels/{channelId}/events/hangup:
    post:
      operationId: postChannelsChannelidEventsHangup
      tags:
        - channels
      summary: Event to hangup a specific channel
      description: Event to hangup a specific channel
      parameters:
        - name: channelId
          in: path
          description: The identifier of the channel
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successfully processed and the event is applied
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: Channel not found
        '500':
          description: Internal server error
        '502':
          description: Bad gateway
  /channels/{channelId}/events/transfer:
    post:
      operationId: postChannelsChannelidEventsTransfer
      tags:
        - channels
      summary: Event to transfer a specific channel
      description: Event to transfer a specific channel
      parameters:
        - name: channelId
          in: path
          description: The identifier of the channel
          required: true
          schema:
            type: string
      requestBody:
        description: event_transfer object must be set
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event_transfer'
        required: true
      responses:
        '201':
          description: Successfully processed and the event is applied
        '400':
          description: Invalid body or id supplied
        '401':
          description: Token unauthorized
        '404':
          description: Channel not found
        '500':
          description: Internal server error
        '502':
          description: Bad gateway
  /channels/{channelId}/events/dtmf:
    post:
      operationId: postChannelsChannelidEventsDtmf
      tags:
        - channels
      summary: Event to send a DTMF for specific channel
      description: Event to send a DTMF for specific channel
      parameters:
        - name: channelId
          in: path
          description: The identifier of the channel
          required: true
          schema:
            type: string
      requestBody:
        description: event_dtmf object must be set
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event_dtmf'
        required: true
      responses:
        '201':
          description: Successfully processed and the event is applied
        '400':
          description: Invalid body or id supplied
        '401':
          description: Token unauthorized
        '404':
          description: Channel not found
        '500':
          description: Internal server error
        '502':
          description: Bad gateway
  /contacts:
    get:
      operationId: getContacts
      tags:
        - contacts
      summary: Get contacts
      description: |
        Retrieves your list of contacts (yours and those shared with you). The maximum of rows returned is set in the parameter <em>limit_count</em> (limited to 500 rows). 
        All the parameters are optional. If the \"search parameter\" is filled, results are sorted by relevance (according to how good the match is).
        Note: If a contact has an emoji in their `firstname`, `lastname`, and/or `company`, it will not be displayed in the response body.
      parameters:
        - name: pagination
          in: query
          description: "[Deprecated] The character sequence assigned to pages in address book. Possible values are: 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '#' for any digit and '.' for any other characters. An empty value disables pagination. The pagination is based on the lastname by default, you can paginate by firstname or company name by combining the 'pagination' and 'alphabetical_order' fields."
          schema:
            type: string
            example: "a"
        - name: alphabetical_order
          in: query
          description: |
            [Deprecated] Alphabetical order impacts the pagination value. Possible values are : FirstnameLastnameCompanyDESC, FirstnameLastnameCompanyASC, LastnameFirstnameCompanyDESC, LastnameFirstnameCompanyASC, CompanyFirstnameLastnameDESC, CompanyFirstnameLastnameASC ,CompanyLastnameFirstnameDESC, CompanyLastnameFirstnameASC.
            Values all respect the format 'Field1Field2Field3ORDER' where 'Field1' will be the field the pagination is based on and 'ORDER' the order of the result (Ascending or Descending)
          schema:
            type: string
            example: "LastnameFirstnameCompanyASC"
        - name: search
          in: query
          description: "The keyword is used to search a specific contact. Index is based on firstname, lastname, company and phone number(s)"
          schema:
            type: string
            example: "Pierre 3362323"
        - name: limit_count
          in: query
          description: Restrict the number of returned rows
          schema:
            type: integer
            format: int64
            maximum: 500
            example: 100
        - name: limit_offset
          in: query
          description: The amount of conversations ignored, not returned
          schema:
            type: integer
            format: int64
            example: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contact_list"
        '204':
          description: Contact list empty
        '400':
          description: Invalid param supplied
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
    post:
      operationId: postContacts
      tags:
        - contacts
      summary: Get or Create contacts
      description: |
        The function depends on the parameter that you sent, the JSON <b>contact_filter</b> to get contacts (yours and those shared with you) or <b>contact_creation</b> in order to create a new one. Only one parameter must be sent. 
        In the case of creation, you can add multiple contacts at the same time, limited to 50 contacts in a row. In the other case, the maximum of contacts returned is set in the variable <em>limit_count</em> (limited to 500 contacts). 
        If the \"search parameter\" is filled, results are sorted by relevance (according to how good the match is).
        Note: If you create a contact with an emoji in their `firstname`, `lastname`, and/or `company`, it will work but not be displayed in the response body when you get them.
      requestBody:
        description: contact_filter for filter OR contact_create for creation
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/contact_filter'
                - $ref: '#/components/schemas/new_contact_request'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contact_list"
        '201':
          description: Contact created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/new_contact_response"
        '204':
          description: Contact list empty
        '400':
          description: Invalid body supplied
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /contacts/{contactId}:
    get:
      operationId: getContactsContactid
      tags:
        - contacts
      summary: Get specific contact
      description: Retrieve data as well as all `numbers` to a specific `contact` by their identifier
      parameters:
        - name: contactId
          in: path
          description: The identifier of the contact
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contact_full"
        '304':
          description: Contact not changed
        '400':
          description: Invalid body supplied
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
    put:
      operationId: putContactsContactid
      tags:
        - contacts
      summary: Update specific contact
      description: "Update the contact from their id. All fields are mandatory, except the array of <em>numbers</em>. If the array of <em>numbers</em> is set, then the numbers will be purged and replaced by those present in the parameter, otherwise no action will be taken for them."
      parameters:
        - name: contactId
          in: path
          description: The identifier of the contact
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/new_contact'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/new_contact"
        '304':
          description: Contact number not deleted
        '404':
          description: Contact not found
        '400':
          description: Invalid body supplied
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
    delete:
      operationId: deleteContactsContactid
      tags:
        - contacts
      summary: Delete contact
      description: Delete the contact by their id
      parameters:
        - name: contactId
          in: path
          description: The identifier of the contact
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
      responses:
        '201':
          description: Successful operation
        '404':
          description: Contact not found
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /contacts/{contactId}/shared/toggle:
    patch:
      operationId: patchContactsContactidSharedToggle
      tags:
        - contacts
      summary: Update is_shared status for specific contact
      description: Toggle the attribute is_shared of the contact indicated in the parameter
      parameters:
        - name: contactId
          in: path
          description: The identifier of the contact
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
      responses:
        '200':
          description: Successful operation
        '304':
          description: Contact not changed
        '404':
          description: Contact not found
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /contacts/{contactId}/firstname/{firstname}:
    patch:
      operationId: patchContactsContactidFirstnameFirstname
      tags:
        - contacts
      summary: Update firstname for specific contact
      description: "Update the attributed <em>firstname</em> of the contact indicated in the parameter. You have to set the parameter directly in the URL."
      parameters:
        - name: contactId
          in: path
          description: The identifier of the contact
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
        - name: firstname
          in: path
          description: The firstname of the contact
          required: true
          schema:
            type: string
            example: "Julien"
      responses:
        '200':
          description: Successful operation
        '304':
          description: Contact not changed
        '404':
          description: Contact not found
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /contacts/{contactId}/lastname/{lastname}:
    patch:
      operationId: patchContactsContactidLastnameLastname
      tags:
        - contacts
      summary: Update lastname for specific contact
      description: "Update the attributed <em>lastname</em> of the contact indicated in the parameter. You have to set the parameter directly in the URL."
      parameters:
        - name: contactId
          in: path
          description: The identifier of the contact
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
        - name: lastname
          in: path
          description: The lastname of the contact
          required: true
          schema:
            type: string
            example: "Dupont"
      responses:
        '200':
          description: Successful operation
        '304':
          description: Contact not changed
        '404':
          description: Contact not found
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /contacts/{contactId}/company/{company}:
    patch:
      operationId: patchContactsContactidCompanyCompany
      tags:
        - contacts
      summary: Update company for specific contact
      description: "Update the attributed company of the contact indicated in the parameter. You have to set the parameter directly in the URL."
      parameters:
        - name: contactId
          in: path
          description: The identifier of the contact
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
        - name: company
          in: path
          description: The company of the contact
          required: true
          schema:
            type: string
            example: "Ringover"
      responses:
        '200':
          description: Successful operation
        '304':
          description: Contact not changed
        '404':
          description: Contact not found
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /contacts/{contactId}/numbers:
    post:
      operationId: postContactsContactidNumbers
      tags:
        - contacts
      summary: Add new number(s) for specific contact
      description: "Allow to add one or more numbers to the contact set in parameter. Phone numbers must be in international format."
      parameters:
        - name: contactId
          in: path
          description: The identifier of the contact
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/number_contact_list'
        required: true
      responses:
        '200':
          description: Successful operation
        '404':
          description: Contact not found
        '400':
          description: Invalid body or id supplied
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
    delete:
      operationId: deleteContactsContactidNumbers
      tags:
        - contacts
      summary: Delete numbers for specific contact
      description: Delete permanently all phone numbers of the contact set in the route
      parameters:
        - name: contactId
          in: path
          description: The identifier of the contact
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
      responses:
        '201':
          description: Successful operation
        '404':
          description: Contact not found
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /contacts/{contactId}/numbers/{number}:
    put:
      operationId: putContactsContactidNumbersNumber
      tags:
        - contacts
      summary: Update a number for specific contact
      description: "Update a phone number from the id and the phone number of the contact. The number in the API route is the old number, while the new number is in the json parameter. Phone numbers must be in E.164 format."
      parameters:
        - name: contactId
          in: path
          description: The identifier of the contact
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
        - name: number
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 33612345678
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/number_light'
        required: true
      responses:
        '201':
          description: Successful operation
        '304':
          description: Contact number not modified
        '404':
          description: Contact not found
        '400':
          description: Invalid body or id supplied
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
    delete:
      operationId: deleteContactsContactidNumbersNumber
      tags:
        - contacts
      summary: Delete number for specific contact
      description: Delete the phone number of the contact set in parameter
      parameters:
        - name: contactId
          in: path
          description: The identifier of the contact
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
        - name: number
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 33612345678
      responses:
        '201':
          description: Successful operation
        '304':
          description: Contact number not deleted
        '404':
          description: Contact not found
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /conversations:
    get:
      operationId: getConversations
      tags:
        - conversations
      summary: Lists conversations filtered by some parameters.
      description: |
        This will show the first 100 available conversations by default. When you provide a 'limit_offset' X with a 'limit_count' Y, the first X conversations will be ignored, and the following Y conversations will be returned.
        > Warning : You will see the conversations you are allowed to see. If you are a supervisor, you will see the conversations of people you supervise (according to the profile linked to your user) and if you have admin rights, you will see all team users' conversations.
      parameters:
        - name: filter
          in: query
          description: Type of conversation
          allowEmptyValue: true
          schema:
            type: array
            example: ["ALL"]
            items:
              type: string
              enum:
                - ALL
                - INTERNAL
                - EXTERNAL
                - COLLABORATIVE
              example: "ALL"
        - name: limit_count
          in: query
          description: Restrict the number of returned rows
          schema:
            type: integer
            format: int64
            maximum: 1000
            example: 100
        - name: limit_offset
          in: query
          description: Number of elements that will be ignored
          schema:
            type: integer
            format: int64
            example: 0
      responses:
        '200':
          description: Successfully processed and the list is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversation_list'
        '204':
          description: Successfully processed and the list is empty
        '400':
          description: The request contains errors
        '401':
          description: You are unauthorized to process this request
        '500':
          description: Internal server error
  /conversations/{convId}:
    get:
      operationId: getConversationsConvid
      tags:
        - conversations
      summary: Gets information about specific conversation
      description: "This will get information about specific conversation in which you have the right to read. For messages, only the last is retrieved. To access all messages."
      parameters:
        - name: convId
          in: path
          description: The identifier of the conversation
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
      responses:
        '200':
          description: Successfully processed and the conversation information is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversation_light'
        '400':
          description: The request contains errors
        '404':
          description: Successfully processed but the conversation is not found
        '401':
          description: You are unauthorized to process this request
        '500':
          description: Internal server error
  /conversations/{convId}/archive:
    post:
      tags:
        - conversations
      operationId: conversationPostArchive
      summary: Archive a specific conversation in level 1
      description: This will archive in level 1 a specific conversation in which you have the right to write
      parameters:
        - name: convId
          in: path
          description: The identifier of the conversation
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
      responses:
        '200':
          description: Successfully processed and the conversation is archived
        '400':
          description: The request contains errors
        '401':
          description: You are unauthorized to process this request
        '404':
          description: Successfully processed but the conversation is not found
        '500':
          description: Internal server error
    delete:
      tags:
        - conversations
      operationId: conversationDeleteArchive
      summary: Archive a specific conversations in level 2.
      description: |-
        This will archive a specific conversation in level 2 on which you have the
        right to write.
      parameters:
        - name: convId
          in: path
          description: The identifier of the conversation
          required: true
          schema:
            type: integer
      responses:
        '200': {
          description: Successfully processed and the conversation is archived
        }
        '400': {
          description: The request contains some mistake(s)
        }
        '401': {
          description: You are unauthorized to process this request
        }
        '404': {
          description: Successfully processed but the conversation is not found
        }
  /conversations/{convId}/unarchive:
    post:
      operationId: postConversationsConvidUnarchive
      tags:
        - conversations
      summary: Unarchive a specific conversation
      description: This will unarchive a specific conversation in which you have the right to write
      parameters:
        - name: convId
          in: path
          description: The identifier of the conversation
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully processed and the conversation is unarchived
        '400':
          description: The request contains errors
        '401':
          description: You are unauthorized to process this request
        '404':
          description: Successfully processed but the conversation is not found
        '500':
          description: Internal server error
  /conversations/{convId}/rename/{newName}:
    post:
      operationId: postConversationsConvidRenameNewname
      tags:
        - conversations
      summary: Renames a specific conversation
      description: This will update the name of a specific conversation on which you have the right to read
      parameters:
        - name: convId
          in: path
          description: The identifier of the conversation
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
        - name: newName
          in: path
          description: New name
          required: true
          schema:
            type: string
            example: "new_name"
      responses:
        '200':
          description: Successfully processed and the conversation is renamed
        '400':
          description: The request contains errors
        '401':
          description: You are unauthorized to process this request
        '404':
          description: Successfully processed but the conversation is not found
        '500':
          description: Internal server error
  /conversations/{convId}/purpose:
    post:
      tags:
        - conversations
      operationId: conversationSetPurpose
      summary: Updates the purpose of specific conversation
      description: This will update the purpose of a specific conversation on which you have the right to read
      parameters:
        - name: convId
          in: path
          description: The identifier of the conversation
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
      requestBody:
        description: Purpose object that needs to be set
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_purpose'
        required: true
      responses:
        '200':
          description: Successfully processed and the conversation purpose is set
        '400':
          description: The request contains errors
        '401':
          description: You are unauthorized to process this request
        '404':
          description: Successfully processed but the conversation is not found
        '500':
          description: Internal server error
  /conversations/{convId}/members:
    get:
      operationId: getConversationsConvidMembers
      tags:
        - conversations
      summary: Lists members of specific conversation
      description: This will show all members in a specific conversation on which you have the right to read
      parameters:
        - name: convId
          in: path
          description: The identifer of the conversation
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully processed and the list of conversation members is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/member_list'
        '204':
          description: Successfully processed and the list is empty
        '400':
          description: The request contains errors
        '401':
          description: You are unauthorized to process this request
        '404':
          description: Successfully processed but the conversation is not found
        '500':
          description: Internal server error
  /conversations/{convId}/messages:
    get:
      operationId: getConversationsConvidMessages
      tags:
        - messages
      summary: Lists messages from a specific conversation in which you have the right to read
      description: "This will show the first 100 available messages in a specific conversation. When you provide a 'limit_offset' X with a 'limit_count' Y, the first X conversations will be ignored, and the following Y conversations will be returned."
      parameters:
        - name: limit_count
          in: query
          description: Restrict the number of returned rows
          schema:
            type: integer
            format: int64
            maximum: 1000
            example: 100
        - name: last_id_returned
          in: query
          description: Last id returned (To avoid duplicates we use it instead of limit_offset)
          schema:
            type: integer
            format: int64
            example: 0
        - name: display_archived
          in: query
          description: A boolean to enable the archive display
          schema:
            type: boolean
            example: false
        - name: convId
          in: path
          description: The conversation ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully processed and the list of messages is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversation_message_list'
        '204':
          description: Successfully processed and the list is empty
        '400':
          description: The request contains errors
        '401':
          description: You are unauthorized to process this request
        '404':
          description: Successfully processed but the conversation is not found
        '500':
          description: Internal server error
  /conversations/{convId}/messages/{messageId}/archive:
    post:
      tags:
        - messages
      operationId: conversationPostMessageArchive
      summary: Archive a specific message in level 1.
      description: This will archive in level 1 a message in a specific conversation in which you have the right to write
      parameters:
        - name: convId
          in: path
          description: The identifier of the conversation
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
        - name: messageId
          in: path
          description: The identifier of the message
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
      responses:
        '200':
          description: Successfully processed and the message is archived
        '400':
          description: The request contains errors
        '401':
          description: You are unauthorized to process this request
        '404':
          description: Successfully processed but the conversation or message is not found
        '500':
          description: Internal server error
    delete:
      tags:
        - messages
      operationId: conversationDeleteMessageArchive
      summary: Archive a specific conversations in level 2.
      description: |-
        This will archive in level 2 a message in a specific conversation on which you have the right to write.
      parameters:
        - name: convId
          in: path
          description: The conversation ID
          required: true
          schema:
            type: integer
        - name: messageId
          in: path
          description: The message ID
          required: true
          schema:
            type: integer
      responses:
        '200': {
          description: Successfully processed and the message is archived
        }
        '400': {
          description: The request contains some mistake(s)
        }
        '401': {
          description: You are unauthorized to process this request
        }
        '404': {
          description: Successfully processed but the conversation or message is not found
        }
  /conversations/{convId}/messages/{messageId}/unarchive:
    post:
      tags:
        - messages
      operationId: conversationMessageUnarchive
      summary: Unarchive a specific message.
      description: This will unarchive a message in a specific conversation in which you have the right to write
      parameters:
        - name: convId
          in: path
          description: The identifier of the conversation
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
        - name: messageId
          in: path
          description: The identifier of the message
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
      responses:
        '200':
          description: Successfully processed and the message is unarchived
        '400':
          description: The request contains errors
        '401':
          description: You are unauthorized to process this request
        '404':
          description: Successfully processed but the conversation or message is not found
        '500':
          description: Internal server error
  /push/sms:
    post:
      operationId: postPushSms
      tags:
        - sms
      summary: Sends a message
      description: "This will send an SMS (the user must have the WRITE rights for Conversations routes). If you worry about your consumption, we invite you to read the following article \"<a href='https://www.ringover.com/support/texting-understanding-and-ontrolling-usage'>SMS: understand and control your consumption</a>\". Phone numbers must be in E.164 format."
      requestBody:
        description: Purpose object that needs to be set
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_push_sms'
        required: true
      responses:
        '202':
          description: Successfully processed and the SMS is sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response_push_sms'
        '400':
          description: The request contains errors
        '401':
          description: You are unauthorized to process this request
        '402':
          description: Payment required
        '500':
          description: Internal server error
  /push/sms/v1:
    post:
      operationId: postPushSmsV1
      tags:
        - sms
      summary: Sends a one-way message
      description: "This will send a one-way SMS or Push SMS (the user must be admin and have the WRITE rights for Conversations routes). Phone number must be in E.164 format."
      requestBody:
        description: Purpose object that needs to be set
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_oneway_sms'
        required: true
      responses:
        '200':
          description: Successfully processed and the SMS is sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response_oneway_sms'
        '400':
          description: The request contains errors
        '401':
          description: You are unauthorized to process this request
        '402':
          description: Payment required
        '403':
          description: Forbidden
        '415':
          description: Unsupported media type
        '500':
          description: Internal server error
  /profiles:
    get:
      operationId: getProfiles
      tags:
        - profiles
      summary: Get all profiles
      description: "Retrieve all your team's profiles"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profile_list'
        '204':
          description: Profile list empty
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /profiles/{profileId}:
    get:
      operationId: getProfilesProfileid
      tags:
        - profiles
      summary: Get profile
      description: Retrieve the profile associated with the <em>profile_id</em> in the route (user must have the READ rights for users routes).
      parameters:
        - name: profileId
          in: path
          description: The identifier of the profile
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profile'
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /presences:
    get:
      operationId: getPresences
      tags:
        - presences
      summary: Get all presences
      description: Retrieve presences information about all your users
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/users_presences"
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /blacklists/numbers:
    get:
      operationId: getBlacklistsNumbers
      tags:
        - blacklist
      summary: "Get team's blacklist"
      description: Retrieve the phone numbers blacklisted by your team
      parameters:
        - name: limit_count
          in: query
          description: "The number of results (default: 100)."
          schema:
            type: integer
            format: int64
        - name: limit_offset
          in: query
          description: "Number of elements that will be ignored (default: 0)."
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/blacklist_list'
        '204':
          description: Blacklist list empty
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
    post:
      operationId: postBlacklistsNumbers
      tags:
        - blacklist
      summary: Add a number to your team's blacklist
      description: Add a number to your team's blacklist, with or without comment (user must have the WRITE rights for users routes)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/request_new_blacklist'
        required: true
      responses:
        '200':
          description: Successful operation
        '304':
          description: Not modified
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /blacklists/numbers/{phoneNumber}:
    get:
      operationId: getBlacklistsNumbersPhonenumber
      tags:
        - blacklist
      summary: Check if a number is blacklisted
      description: "Check if a number is blacklisted, a 200 HTTP Code response mean the number is blacklisted, a 404 HTTP response mean that the number isn't in the blacklist."
      parameters:
        - name: phoneNumber
          in: path
          description: The phone number
          required: true
          schema:
            type: integer
            format: int64
            example: 33612345678
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/blacklist'
        '401':
          description: Token unauthorized
        '404':
          description: Phone number not blacklisted
        '500':
          description: Internal server error
    delete:
      operationId: deleteBlacklistsNumbersPhonenumber
      tags:
        - blacklist
      summary: Remove a team blacklisted number
      description: "Remove a number from your team's blacklist."
      parameters:
        - name: phoneNumber
          in: path
          description: The phone number
          required: true
          schema:
            type: integer
            format: int64
            example: 33612345678
      responses:
        '200':
          description: Successful operation
        '401':
          description: Token unauthorized
        '304':
          description: Not modified
        '500':
          description: Internal server error
  /blacklists/numbers/{phoneNumber}/comment/{newComment}:
    patch:
      operationId: patchBlacklistsNumbersPhonenumberCommentNewcomment
      tags:
        - blacklist
      summary: "Update the comment of a team's blacklisted number"
      description: "Update the comment of a team's blacklisted number"
      parameters:
        - name: phoneNumber
          in: path
          description: The phone number
          required: true
          schema:
            type: integer
            format: int64
            example: 33612345678
        - name: newComment
          in: path
          description: New comment
          required: true
          schema:
            type: string
            example: "new_comment"
      responses:
        '200':
          description: Successful operation
        '304':
          description: Not modified
        '401':
          description: Token unauthorized
        '404':
          description: Phone number not blacklisted.
        '500':
          description: Internal server error
  /users/{userId}/blacklists/numbers:
    get:
      operationId: getUsersUseridBlacklistsNumbers
      tags:
        - blacklist
      summary: "Get user's blacklist"
      description: "Retrieve the phone numbers blacklisted by the user in parameter (user must have the READ rights for users routes)."
      parameters:
        - name: limit_count
          in: query
          description: "The number of results (default: 100)."
          schema:
            type: integer
            format: int64
        - name: limit_offset
          in: query
          description: "Number of elements that will be ignored (default: 0)."
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          description: The identifier of the user
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/blacklist_list'
        '204':
          description: Blacklist list empty
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
    post:
      operationId: postUsersUseridBlacklistsNumbers
      tags:
        - blacklist
      summary: "Add a number to a user's blacklist"
      description: "Add a number to a user's blacklist, with or without comment (user must have the WRITE rights for users routes)."
      parameters:
        - name: userId
          in: path
          description: The identifier of the user
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/request_new_blacklist'
        required: true
      responses:
        '200':
          description: successful operation
        '304':
          description: Not modified
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /users/{userId}/blacklists/numbers/{phoneNumber}:
    get:
      operationId: getUsersUseridBlacklistsNumbersPhonenumber
      tags:
        - blacklist
      summary: Check if a specific phone number is present in the blacklist of a specific user.
      description: "Check if a number is blacklisted, a 200 HTTP Code response mean the number is blacklisted, a 404 HTTP response mean that the number isn't in the user's blacklist (user must have the READ rights for users routes)."
      parameters:
        - name: userId
          in: path
          description: The identifier of the user
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
        - name: phoneNumber
          in: path
          description: The phone number
          required: true
          schema:
            type: integer
            format: int64
            example: 33612345678
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/blacklist'
        '400':
          description: Invalid id supplied
        '401':
          description: Token unauthorized
        '404':
          description: Phone number blacklisted
        '500':
          description: Internal server error
    delete:
      operationId: deleteUsersUseridBlacklistsNumbersPhonenumber
      tags:
        - blacklist
      summary: Remove a user blacklisted number
      description: "Remove a number from your user's blacklist (user must have the WRITE rights for users routes)."
      parameters:
        - name: userId
          in: path
          description: The identifier of the user
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
        - name: phoneNumber
          in: path
          description: The phone number
          required: true
          schema:
            type: integer
            format: int64
            example: 33612345678
      responses:
        '200':
          description: Successful operation
        '401':
          description: Token unauthorized
        '304':
          description: Not modified
        '500':
          description: Internal server error
  /users/{userId}/blacklists/numbers/{phoneNumber}/comment/{newComment}:
    patch:
      operationId: patchUsersUseridBlacklistsNumbersPhonenumberCommentNewcomment
      tags:
        - blacklist
      summary: "Update the comment of a user's blacklisted number"
      description: "Update the comment of a user's blacklisted number (user must have the WRITE rights for users routes)"
      parameters:
        - name: userId
          in: path
          description: The identifier of the user
          required: true
          schema:
            type: integer
            format: int64
            example: 123456
        - name: phoneNumber
          in: path
          description: The phone number
          required: true
          schema:
            type: integer
            format: int64
            example: 33612345678
        - name: newComment
          in: path
          description: The new comment
          required: true
          schema:
            type: string
            example: "new_comment"
      responses:
        '200':
          description: Successful operation
        '304':
          description: Not modified
        '401':
          description: Token unauthorized
        '404':
          description: Phone number blacklisted
        '500':
          description: Internal server error
  /callback:
    post:
      operationId: postCallback
      tags:
        - callbacks
      summary: Callback
      description: |
        This API route is used to trigger a call in specific IVR queue (the user must have the WRITE right with their API key for the call routes).
        
        <strong>Caution:</strong> this feature adds call redirection fees.

        Here is the call workflow:
        1. Your user (<em>from_number</em>) receives a call from the recipient's number (<em>to_number</em>)
        2. Your user picks up the phone
        
        > A call is automatically made to the recipient (<em>to_number</em>).
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/request_callback'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/callback_list'
        '401':
          description: Token unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /ivrs/{ivrId}/callback:
    post:
      operationId: postIvrsIvridCallback
      tags:
        - callbacks
        - ivrs
      summary: "IVR Callback"
      description: |
        IVR Callbacks are only available in the Business and Advanced plans. Credit charges may apply based on your destination.
        <br>This API route is used to trigger a call in specific IVR queue (the user must have the WRITE right with their API key for the call routes).
      parameters:
        - name: ivrId
          in: path
          description: The ivr identifier
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/request_ivr_callback'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/callback_list'
        '401':
          description: Token unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal server error
  /snoozes:
    get:
      operationId: getSnoozes
      tags:
        - snoozes
      summary: Get all snooze labels
      description: This request allows you to get the list of snooze labels in several languages if applicable.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/snooze_label"
        '401':
          description: Token unauthorized
        '500':
          description: Internal server error
  /whatsapp/templates/send:
    post:
      tags:
        - whatsapp
      operationId: sendWhatsappTemplate
      summary: Send a WhatsApp template message
      description: This endpoint sends a WhatsApp template message to a specified external number.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                template_uuid:
                  type: string
                  example: "1eb09f33-348e-42e6-bfb3-361df133c82e"
                external_number:
                  type: integer
                  example: 33612345678
      responses:
        '200':
          description: Successful operation
        '400':
          description: The request contains errors
        '401':
          description: You are unauthorized to process this request
        '404':
          description: The specified resource was not found
        '409':
          description: >
            The template message cannot be sent again unless the user has responded.
            However, it can be resent if at least 24 hours have passed since the initial template message was sent.
  /whatsapp/templates:
    post:
      tags:
        - whatsapp
      operationId: createWhatsappTemplate
      summary: Create a WhatsApp template
      description: This endpoint creates a Whatsapp message template and returns the template UUID. The template name should not have upper case and special characters.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "hello"
                account_uuid:
                  type: string
                  example: "1eb09f33-348e-42e6-bfb3-361df133c82e"
                data:
                  type: string
                  example: "Hello"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                example: "1eb09f33-348e-42e6-bfb3-361df133c82e"
        '400':
          description: The request contains errors
        '401':
          description: You are unauthorized to process this request
        '404':
          description: The account UUID was not found
  /whatsapp/templates/{template_uuid}:
    delete:
      tags:
        - whatsapp
      operationId: deleteWhatsappTemplate
      summary: Delete a WhatsApp template
      description: This endpoint deletes a Whatsapp message template.
      parameters:
        - name: template_uuid
          in: path
          description: The template UUID
          required: true
          schema:
            type: string
            example: "1eb09f33-348e-42e6-bfb3-361df133c82e"
      responses:
        '200':
          description: Successful operation
        '400':
          description: The request contains errors
        '401':
          description: You are unauthorized to process this request
        '404':
          description: The specified resource was not found
  /whatsapp/accounts:
    get:
      tags:
        - whatsapp
      operationId: getWhatsappAccounts
      summary: Get all WhatsApp accounts associated with the user
      description: This endpoint retrieves all WhatsApp accounts associated with the user.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/whatsapp_account_list'
        '401':
          description: You are unauthorized to process this request
        '404':
          description: The specified resource was not found
        '500':
          description: Internal server error
  /whatsapp/{account_uuid}/templates:
    get:
      tags:
        - whatsapp
      operationId: getWhatsappTemplates
      summary: Get all WhatsApp templates associated with the account
      description: This endpoint retrieves all WhatsApp templates associated with the account.
      parameters:
        - name: account_uuid
          in: path
          description: The account UUID
          required: true
          schema:
            type: string
            example: "1eb09f33-348e-42e6-bfb3-361df133c82e"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/whatsapp_template_list'
        '401':
          description: You are unauthorized to process this request
        '404':
          description: The specified resource was not found
        '500':
          description: Internal server error
  /whatsapp/conversations:
    post:
      tags:
        - whatsapp
      operationId: getWhatsappConversations
      summary: Get WhatsApp conversations
      description: This endpoint retrieves all Whatsapp conversations. Account UUID is a optional parameter.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                limit_count:
                  type: integer
                  example: 10
                limit_offset:
                  type: integer
                  example: 0
                account_uuid:
                  type: string
                  example: "1eb09f33-348e-42e6-bfb3-361df133c82e"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/whatsapp_conversation_list'
        '401':
          description: You are unauthorized to process this request
        '404':
          description: The specified resource was not found
        '500':
          description: Internal server error

  /whatsapp/messages:
    post:
      summary: send Whatsapp message
      tags:
        - whatsapp
      operationId: sendWhatsappMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                conversation_uuid:
                  type: string
                  example: "1eb09f33-348e-42e6-bfb3-361df133c82e"
                data:
                  type: string
                  example: "Hello"
              required:
                - conversation_uuid
                - data
      responses:
        '200':
          description: Successful operation
        '400':
          description: The request contains errors
        '401':
          description: You are unauthorized to process this request
        '404':
          description: The specified resource was not found
        '500':
          description: Internal server error

webhooks:
  ivr_response_code:
    post:
      operationId: webhookIVR
      tags:
        - webhook
      summary: IVR response event
      description: |
        This event is triggered when a customer answers a response code from an IVR scenario: 
        1. Ringover sends you information about an event.
        2. You send an HTTP code according to this information (for instance, 200 if it is a successful operation).
        3. An IVR with an "Ask for a code" scenario can be created with various HTTP codes and according to the code you return, an event is triggered (recording, redirection, etc.).

        > Warning: Announcements must be set in the IVR in order for this webhook to be operational.

        To certify that the request was sent by Ringover, the `x-ringover-webhook-signature` header must be a base-64 encoded version of the webhook key you can find in the webhook configuration page of Ringover dashboard. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook_request_ivr_response_code'
        required: true
      responses:
        '200':
          description: Successful operation
        default:
          description: Other response code are ignored
  message:
    post:
      operationId: webhookMessage
      tags:
        - webhook
      summary: Message event
      description: |
        This event is triggered when a message is sent and/or received (according to your settings on the myringover dashboard). The data object contained in the sent object will give you information such as the sending number, the receiving number, the content of the message, the time it was sent etc...

        To certify that the request was sent by Ringover, the `Authorization` header must be a base-64 encoded version of the webhook key you can find in the webhook configuration page of Ringover dashboard. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook_request_message'
        required: true
      responses:
        '200':
          description: Successful operation
        default:
          description: Other response code are ignored
  smart_routing:
    post:
      operationId: SmartRouting
      tags:
        - webhook
      summary: Smart routing event
      description: |
        The Smart routing webhook event is a little more tricky because the webhook requires a response from you within two seconds. When the webhook lands on your <em>endpoint</em>, your endpoint must communicate the response object below.  We advise you to consult the description of each attribute, which are all mandatory.
        This event can apply to an IVR.

        To certify that the request was sent by Ringover, the `Authorization` header must be equal to the webhook key you can find in the webhook configuration page of Ringover dashboard. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook_request_smart_routing'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/webhook_response_smart_routing"
        default:
          description: Other response code are ignored
  contact:
    post:
      operationId: postContact
      tags:
        - webhook
      summary: Contact event
      description: |
        Webhook sent on each call (incoming and outgoing), it will allow you to transmit notes to the agent. The notes are located next to the contact's photo, in the information bubble of the call window. You can set custom information in the data object (refer to the object below).

        To certify that the request was sent by Ringover, the `Authorization` header must be equal to the webhook key you can find in the webhook configuration page of Ringover dashboard. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook_request_contact'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/webhook_response_contact"
        default:
          description: Other response code are ignored
  contact_search:
    post:
      operationId: contactSearchEvent
      tags:
        - webhook
      summary: Contact Search event
      description: |
        The webhook is triggered during a search on myringover (in the smartdialer, on contacts tabs, ...). In order to get from your API the contact's informations and numbers.

        To certify that the request was sent by Ringover, the `Authorization` header must be equal to the webhook key you can find in the webhook configuration page of Ringover dashboard. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/webhook_request_contactsearch"
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/webhook_response_contactsearch"
        default:
          description: Other response code are ignored
  call_ringing:
    post:
      operationId: postCallRinging
      tags:
        - webhook
      summary: Call ringing event
      description: |
        Incoming call webhook, triggered when you receive a call. You will retrieve all the call's information and if it's to a voice server, you'll also have the information related to it in the object <em>ivr_data</em>.

        To certify that the request was sent by Ringover, the `Authorization` header must be equal to the webhook key you can find in the webhook configuration page of Ringover dashboard. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/webhook_request_call_ringing"
        required: true
      responses:
        '200':
          description: Successful operation
        default:
          description: Other response code are ignored
  call_answered:
    post:
      operationId: postCallAnswered
      tags:
        - webhook
      summary: Call answered event
      description: |
        Incoming call webhook, triggered when you answer a call

        To certify that the request was sent by Ringover, the `Authorization` header must be equal to the webhook key you can find in the webhook configuration page of Ringover dashboard. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/webhook_request_call_answered"
        required: true
      responses:
        '200':
          description: Successful operation
        default:
          description: Other response code are ignored
  call_hangup:
    post:
      operationId: postCallHangup
      tags:
        - webhook
      summary: Call hangup event
      description: |
        Terminated call webhook, when you hang up a call

        To certify that the request was sent by Ringover, the `Authorization` header must be equal to the webhook key you can find in the webhook configuration page of Ringover dashboard. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/webhook_request_call_hangup"
        required: true
      responses:
        '200':
          description: Successful operation
        default:
          description: Other response code are ignored
  call_missed:
    post:
      operationId: postCallMissed
      tags:
        - webhook
      summary: Call missed event
      description: |
        This webhook is triggered when an incoming call is missed

        To certify that the request was sent by Ringover, the `Authorization` header must be equal to the webhook key you can find in the webhook configuration page of Ringover dashboard. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/webhook_request_call_missed"
        required: true
      responses:
        '200':
          description: Successful operation
        default:
          description: Other response code are ignored
  call_voicemail:
    post:
      operationId: postCallVoiceMail
      tags:
        - webhook
      summary: Call voicemail event
      description: |
        This webhook is triggered when you get a new voicemail

        To certify that the request was sent by Ringover, the `Authorization` header must be equal to the webhook key you can find in the webhook configuration page of Ringover dashboard. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/webhook_request_call_voicemail"
        required: true
      responses:
        '200':
          description: Successful operation
        default:
          description: Other response code are ignored
  call_comments_updated:
    post:
      operationId: postCallCommentsUpdated
      tags:
        - webhook
      summary: Comment updated event
      description: |
        This webhook is triggered when a comment is updated

        To certify that the request was sent by Ringover, the `Authorization` header must be equal to the webhook key you can find in the webhook configuration page of Ringover dashboard. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/webhook_request_call_comments_updated"
        required: true
      responses:
        '200':
          description: Successful operation
        default:
          description: Other response code are ignored
  call_tags_updated:
    post:
      operationId: potCallTagsUpdated
      tags:
        - webhook
      summary: Tag updated event
      description: |
        This webhook is triggered when a tag is updated

        To certify that the request was sent by Ringover, the `Authorization` header must be equal to the webhook key you can find in the webhook configuration page of Ringover dashboard. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/webhook_request_call_tags_updated"
        required: true
      responses:
        '200':
          description: Successful operation
        default:
          description: Other response code are ignored
  call_record_available:
    post:
      operationId: postCallRecordAvailable
      tags:
        - webhook
      summary: Record available event
      description: |
        This webhook is triggered when a record is available

        To certify that the request was sent by Ringover, the `Authorization` header must be equal to the webhook key you can find in the webhook configuration page of Ringover dashboard. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/webhook_request_call_record_available"
        required: true
      responses:
        '200':
          description: Successful operation
        default:
          description: Other response code are ignored
  call_voicemail_available:
    post:
      operationId: postCallVoiceMailAvailable
      tags:
        - webhook
      summary: Voicemail available event
      description: |
        This webhook is triggered when a voicemail is available

        To certify that the request was sent by Ringover, the `Authorization` header must be equal to the webhook key you can find in the webhook configuration page of Ringover dashboard. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/webhook_request_call_voicemail_available"
        required: true
      responses:
        '200':
          description: Successful operation
        default:
          description: Other response code are ignored
  transcription_available:
    post:
      operationId: postCallTranscriptionAvailable
      tags:
        - webhook
      summary: Transcription available event
      description: |
        This webhook is triggered when a transcription link is available

        To certify that the request was sent by Ringover, the `Authorization` header must be equal to the webhook key you can find in the webhook configuration page of Ringover's dashboard. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/webhook_request_transcription_available"
        required: true
      responses:
        '200':
          description: Successful operation
        default:
          description: Other response code are ignored
  summary_available:
    post:
      operationId: postCallSummaryAvailable
      tags:
        - webhook
      summary: Summary available event
      description: |
        This webhook is triggered when a summary is available

        To certify that the request was sent by Ringover, the `Authorization` header must be equal to the webhook key you can find in the webhook configuration page of Ringover's dashboard. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/webhook_request_summary_available"
        required: true
      responses:
        '200':
          description: Successful operation
        default:
          description: Other response codes are ignored
components:
  securitySchemes:
    Authorization:
      description: |
        We use API keys for authentication to authorize API requests. First, you need to create a public access token (API key) and select the appropriate rights for each user. To do so:
          1. Open the Ringover Dashboard.
          2. Go to the **Developer** section.
          3. Click the **Create an API key** button.
          4. Select a user in the drop-down menu and enter a label for the key and click the **Create** button.
          5. Click the **Edit** button corresponding to the API key and select the appropriate rights.

        Once you've created a public access token, you can use it in the 'Authorization' header to authenticate your HTTP request.
      type: apiKey
      name: Authorization
      in: header
  schemas:
    team:
      type: object
      properties:
        team_id:
          type: integer
          format: int64
          description: Unique identifier for the object
          example: 123456
        name:
          type: string
          description: The name of your team
          example: "My Company"
        total_numbers_count:
          type: integer
          format: int64
          description: The size of numbers array
          example: 1
        numbers:
          type: array
          items:
            $ref: "#/components/schemas/number"
        total_users_count:
          type: integer
          format: int64
          description: The size of users array
          example: 1
        users:
          type: array
          items:
            $ref: "#/components/schemas/user_full"
        total_ivrs_count:
          type: integer
          format: int64
          description: The size of ivrs array
          example: 1
        ivrs:
          type: array
          items:
            $ref: "#/components/schemas/ivr"
        total_conferences_count:
          type: integer
          format: int64
          description: The size of conferences array
          example: 1
        conferences:
          type: array
          items:
            $ref: "#/components/schemas/conference"
        total_tags_count:
          type: integer
          format: int64
          description: The size of tags array
          example: 1
        tags:
          type: array
          items:
            $ref: "#/components/schemas/tag"
        total_groups_count:
          type: integer
          format: int64
          description: The size of groups array
          example: 1
        groups:
          type: array
          items:
            $ref: "#/components/schemas/group_light"
    number:
      type: object
      properties:
        number:
          type: integer
          description: The phone number
          example: 33184800000
        label:
          type: string
          description: The label of the number
          example: "myfavoritenumber"
        type:
          type: string
          description: The type of the number
          example: "PHONE"
        user_id:
          type: integer
          format: int64
          description: The user identifier
          example: 60907
        ivr_id:
          type: integer
          format: int64
          description: The ivr identifier
          example: 60908
        conference_id:
          type: integer
          format: int64
          description: The conference identifier
          example: 60908
        is_sms:
          type: boolean
          example: false
        is_sms_write:
          type: boolean
          example: false
        is_callable:
          type: boolean
          example: false
        format:
          $ref: "#/components/schemas/format_number"
    user_light:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          description: The user identifier
          example: 123456
        team_id:
          type: integer
          format: int64
          description: The team identifier of the user
          example: 123456
        initial:
          type: string
          description: The initials of the user
          example: "PM"
        color:
          type: string
          example: "3CC8C8"
        firstname:
          type: string
          description: The firstname of the user
          example: "Pauline"
        lastname:
          type: string
          description: The lastname of the user
          example: "Martin"
        company:
          type: string
          description: The company of the user
          example: "Ringover"
        email:
          type: string
          description: The email of the user
          example: "pauline.martin@ringover.com"
        picture:
          type: string
          description: The picture of the user
          example: "https://cdn77.ringover.com/img/users/default.jpg"
        concat_name:
          type: string
          example: "Pauline Martin"
    conv_user_light:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          description: The user identifier
          example: 123456
        initial:
          type: string
          description: The initials of the user
          example: "PM"
        color:
          type: string
          example: "3CC8C8"
        firstname:
          type: string
          description: The firstname of the user
          example: "Pauline"
        lastname:
          type: string
          description: The lastname of the user
          example: "Martin"
        company:
          type: string
          description: The company of the user
          example: "Ringover"
        concat_name:
          type: string
          example: "Pauline Martin"
        email:
          type: string
          description: The email of the user
          example: "pauline.martin@ringover.com"
        picture:
          type: string
          description: The picture of the user
          example: "https://cdn77.ringover.com/img/users/default.jpg"
        is_sms_write:
          type: boolean
          example: false
          description: True if the user can send an SMS in the conversation
        is_administrator:
          type: boolean
    call_user_light:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          description: The user identifier
          example: 123456
        team_id:
          type: integer
          format: int64
          description: The team identifier of the user
          example: 123456
        initial:
          type: string
          description: The initials of the user
          example: "PM"
        color:
          type: string
          example: "3CC8C8"
        firstname:
          type: string
          description: The firstname of the user
          example: "Pauline"
        lastname:
          type: string
          description: The lastname of the user
          example: "Martin"
        company:
          type: string
          description: The company of the user
          example: "Ringover"
        email:
          type: string
          description: The email of the user
          example: "pauline.martin@ringover.com"
        picture:
          type: string
          description: The picture of the user
          example: "https://cdn77.ringover.com/img/users/default.jpg"
        concat_name:
          type: string
          example: "Pauline Martin"
    user_full:
      allOf:
        - $ref: "#/components/schemas/user_light"
        - type: object
          properties:
            numbers:
              type: array
              items:
                $ref: "#/components/schemas/number"
              description: The numbers of the user
    webhook_ivr_v2:
      type: object
      properties:
        name:
          type: string
          description: The name of the ivr
          example: "StandardFacile"
        number:
          type: string
          description: The number of the ivr
          example: '33677887788'
        scenario:
          type: object
          properties:
            scenario_id:
              type: integer
              format: uint64
              example: 123456789
            ivr_id:
              type: integer
              format: uint64
              example: 123456789
            name:
              type: string
              example: "MonSuperScenario"
            scenario_type:
              type: string
              example: "voicemail"
    ivr:
      type: object
      properties:
        ivr_id:
          type: integer
          format: int64
          description: The identifier of the ivr
          example: 123456
        name:
          type: string
          description: The name of the ivr
          example: "StandardFacile"
        color:
          type: string
          enum:
            - "ff6b6b"
            - "F06292"
            - "BA68C8"
            - "9575CD"
            - "7986CB"
            - "64B5F6"
            - "4FC3F7"
            - "4DD0E1"
            - "4DB6AC"
            - "81C784"
            - "AED581"
            - "DCE775"
            - "FFD54F"
            - "FFB74D"
            - "FF8A65"
            - "A1887F"
            - "E0E0E0"
            - "90A4AE"
          example: "ff6b6b"
        numbers:
          type: array
          items:
            $ref: "#/components/schemas/number"
          description: The numbers of the ivr
        scenarios:
          type: array
          items:
            $ref: "#/components/schemas/scenario"
            description: The scenario of the ivr
        is_open:
          type: boolean
          example: true
          description: The ivr is open or not
    ivr_without_number:
      type: object
      properties:
        ivr_id:
          type: integer
          format: int64
          description: The identifier if the ivr
          example: 123456
        color:
          type: string
          enum:
            - "ff6b6b"
            - "F06292"
            - "BA68C8"
            - "9575CD"
            - "7986CB"
            - "64B5F6"
            - "4FC3F7"
            - "4DD0E1"
            - "4DB6AC"
            - "81C784"
            - "AED581"
            - "DCE775"
            - "FFD54F"
            - "FFB74D"
            - "FF8A65"
            - "A1887F"
            - "E0E0E0"
            - "90A4AE"
          example: "ff6b6b"
        name:
          type: string
          description: The name of the ivr
          example: "StandardFacile"
        scenarios:
          type: array
          items:
            type: object
            properties:
              scenario_id:
                type: integer
                format: int64
                description: The scenario identifier
                example: 123456
              ivr_id:
                type: integer
                format: int64
                description: The ivr identifier
                example: 1234
              name:
                type: string
                description: The name of the scenario
                example: "myscenario"
              color:
                type: string
                example: '123456'
              scenario_type:
                type: string
                enum:
                  - menu
                  - announce
                  - queue
                  - sms
                  - webhook
                  - input
                description: The type of the scenario
                example: "menu"
              is_default:
                type: boolean
                example: true
        is_open:
          type: boolean
          example: true
          description: The ivr is open or not
    ivr_light:
      type: object
      properties:
        ivr_id:
          type: integer
          format: int64
          description: The identifier if the ivr
          example: 123456
        name:
          type: string
          description: The name of the ivr
          example: "StandardFacile"
        color:
          type: string
          enum:
            - "ff6b6b"
            - "F06292"
            - "BA68C8"
            - "9575CD"
            - "7986CB"
            - "64B5F6"
            - "4FC3F7"
            - "4DD0E1"
            - "4DB6AC"
            - "81C784"
            - "AED581"
            - "DCE775"
            - "FFD54F"
            - "FFB74D"
            - "FF8A65"
            - "A1887F"
            - "E0E0E0"
            - "90A4AE"
          example: "ff6b6b"
    conference:
      type: object
      properties:
        conference_id:
          type: integer
          format: int64
          description: The conference identifier
          example: 60908
        name:
          type: string
          description: The name of the conference
          example: "SoConference"
        numbers:
          type: array
          items:
            $ref: "#/components/schemas/number"
          description: The numbers of the conference
    tag:
      type: object
      properties:
        tag_id:
          type: integer
          format: int64
          description: The identifier of the tag
          example: 123
        name:
          type: string
          description: The name of the tag
          example: "mytag"
        color:
          type: string
          enum:
            - "ff6b6b"
            - "F06292"
            - "BA68C8"
            - "9575CD"
            - "7986CB"
            - "64B5F6"
            - "4FC3F7"
            - "4DD0E1"
            - "4DB6AC"
            - "81C784"
            - "AED581"
            - "DCE775"
            - "FFD54F"
            - "FFB74D"
            - "FF8A65"
            - "A1887F"
            - "E0E0E0"
            - "90A4AE"
          example: "ff6b6b"
        description:
          type: string
          description: The description of the tag
          example: "my tag description"
        creation_date:
          type: string
          format: date-time
          example: "2018-08-12T12:12:40.53Z"
    group_user:
      allOf:
        - $ref: "#/components/schemas/user_light"
        - type: object
          properties:
            ring_duration:
              type: integer
              format: int64
              description: Ring duration when an IVR incoming call append
              example: 0
            order:
              type: integer
              format: int64
              description: The order in the ivr queue
              example: 0
    group_light:
      type: object
      properties:
        group_id:
          type: integer
          format: int64
          description: The identifier of the group
          example: 999999
        name:
          type: string
          description: The name of the group
          example: "myIVR"
        total_users_count:
          type: integer
          format: int64
          description: The number of users in the group
          example: 0
        color:
          type: string
          example: "FFD54F"
        is_jumper:
          type: boolean
          description: Allow users to jump into
          example: false
    group_full:
      allOf:
        - $ref: "#/components/schemas/group_light"
        - type: object
          properties:
            users:
              type:
                - array
                - 'null'
              description: The list of campaign sms
              items:
                $ref: '#/components/schemas/group_user'
    format_number:
      type: object
      properties:
        raw:
          type: integer
          format: int64
          example: 184800000
        country_code:
          type: string
          example: '33'
        country:
          type: string
          example: "FR"
        e164:
          type: string
          example: "+33184800000"
        international:
          type: string
          example: "+33 1 84 80 00 00"
        international_alt:
          type: string
          example: '33184800000'
        national:
          type: string
          example: "01 84 80 00 00"
        national_alt:
          type: string
          example: '0184800000'
        rfc3966:
          type: string
          example: "tel:+33-1-84-80-00-00"
        is_short_code:
          type: boolean
          example: false
    scenario:
      type: object
      properties:
        scenario_id:
          type: integer
          format: int64
          description: The scenario identifier
          example: 123456
        ivr_id:
          type: integer
          format: int64
          description: The ivr identifier
          example: 1234
        name:
          type: string
          description: The name of the scenario
          example: "myscenario"
        color:
          type: string
          example: '123456'
        scenario_type:
          type: string
          enum:
            - menu
            - announce
            - queue
            - sms
            - webhook
            - input
          description: The type of the scenario
          example: "menu"
        is_default:
          type: boolean
          example: true
    group_list:
      type: object
      properties:
        list_count:
          type: integer
          format: int64
          description: The size of the list
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/group_light'
    add_user_group:
      type: array
      example: [ 12345 ]
      items:
        type: integer
        format: int64
        example: 12345
    user_list:
      type: object
      properties:
        list_count:
          type: integer
          format: int64
          description: The size of the list
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/user_full'
    new_user:
      type: object
      properties:
        email:
          type: string
          example: "myemail@domain.com"
        number:
          type: integer
          format: int64
          description: Phone number (E.164 format)
          example: 33179750000
        commitment:
          description: (optional) with or without commitment
          type: boolean
          example: false
    user_plannings:
      type: object
      properties:
        team_id:
          type: integer
          format: int64
          description: "The user's team id"
          example: 123456
        user_id:
          type: integer
          format: int64
          description: "The user's id"
          example: 123456
        tz_identifier:
          type: string
          description: "The user's timezone"
          example: Europe/Paris
        tz_now:
          type: string
          description: "Current timestamp of the user's timezone"
          example: "2020-04-08T10:34:28+02:00"
        planning_enable:
          type: boolean
          description: True if the user have the planning option activated on myringover
          example: true
        is_planning:
          type: boolean
          description: True if the user is currently in his planning schedule
          example: true
        is_snoozed:
          type: boolean
          description: True if the user is currently in snooze
          example: false
        time_ranges:
          type: array
          description: "Array of all the user's schedules. time_ranges is null if planning_enable is equal to false"
          items:
            $ref: "#/components/schemas/time_ranges"
    time_ranges:
      type: object
      properties:
        day:
          type: integer
          format: int64
          description: Day of the week (0 => Monday, 6 => Sunday)
          example: 0
        start:
          type: integer
          format: int64
          description: Start time in minutes (0 => 0:00)
          example: 0
        end:
          type: integer
          format: int64
          description: End time in minutes (1440 => 24:00)
          example: 1440
    time_ranges_short:
      type: object
      properties:
        start:
          type: integer
          format: int64
          description: Start time in minutes (0 => 0:00)
          example: 0
        end:
          type: integer
          format: int64
          description: End time in minutes (1440 => 24:00)
          example: 1440
    user_presences:
      type: object
      properties:
        team_id:
          type: integer
          format: int64
          description: "The user's team id"
          example: 123456
        user_id:
          type: integer
          format: int64
          description: "The user's id"
          example: 123456
        in_call:
          type: integer
          format: int64
          description: Number of current calls (it can be more than 1)
          example: 1
        connected_devices:
          type: integer
          format: int64
          description: Number of devices connected to myringover
          example: 3
        planning_enable:
          type: boolean
          description: True if the user have the planning option activated on myringover
          example: true
        is_planning:
          type: boolean
          description: True if the user is currently in his planning schedule
          example: true
        is_planned_snooze:
          type: boolean
          description: False if the user is currently in his planning schedule
          example: false
        is_snoozed:
          type: boolean
          description: True if the user is currently in snooze
          example: true
        snooze_type:
          type: string
          description: The type of snooze currently used. Null if is_snoozed is false
          example: "meeting"
        snooze_end:
          type: string
          description: End date/time of the snooze
          example: "2020-07-17 10:14:24"
    number_list:
      type: object
      properties:
        list_count:
          type: integer
          format: int64
          description: The size of the list
          example: 1
        list:
          type: array
          items:
            $ref: "#/components/schemas/number"
    ivr_list:
      type: object
      properties:
        list_count:
          type: integer
          format: int64
          description: The size of the list
          example: 1
        list:
          type: array
          items:
            $ref: "#/components/schemas/ivr_without_number"
    surveys_list:
      type: object
      properties:
        total_count:
          type: integer
          description: The total number of survey answers retrieved
          format: int64
          example: 1
        survey_list:
          type: array
          description: Array containing the different survey answers for the given call
          items:
            $ref: "#/components/schemas/survey"
    survey:
      type: object
      properties:
        channel_id:
          type: integer
          format: int64
          example: 1000
        name:
          type: string
          example: "toto"
        value:
          type: string
          example: "yes"
    scenario_list:
      type: object
      properties:
        list_count:
          type: integer
          format: int64
          description: The size of the list
          example: 1
        list:
          type: array
          items:
            $ref: "#/components/schemas/scenario"
    tag_list:
      type: object
      properties:
        list_count:
          type: integer
          format: int64
          description: The size of the list
          example: 1
        list:
          type: array
          items:
            $ref: "#/components/schemas/tag"
    conference_list:
      type: object
      properties:
        list_count:
          type: integer
          format: int64
          description: The size of the list
          example: 1
        list:
          type: array
          items:
            $ref: "#/components/schemas/conference"
    calls_list:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          description: The identifier of the user
          example: 123456
        team_id:
          type: integer
          format: int64
          description: The identifier of the team
          example: 654321
        limit_count_setted:
          description: Used to create a pagination cursor
          type: integer
          format: int64
          maximum: 1000
          example: 100
        limit_offset_setted:
          description: Used to create a pagination cursor
          type: integer
          format: int64
          example: 100
        last_id_offset_setted:
          description: The request will return <b>cdr_id</b> (call logs) prior to this one
          type: integer
          format: int64
          example: 19479170
        filter:
          description: The used filter
          type: string
        call_list_count:
          type: integer
          description: The size of the array <em>list</em>, corresponds to the number of logs retrieved
          format: int64
          example: 1
        call_list:
          type: array
          description: Array containing the different logs generated by the call (for example in case of transfer)
          items:
            $ref: "#/components/schemas/call"
        total_call_count:
          type: integer
          description: The total number of calls
          format: int64
          example: 1337
        total_missed_call_count:
          type: integer
          description: The total number of missed calls
          format: int64
          example: 4
    calls_list_id:
      type: object
      properties:
        list_count:
          type: integer
          description: The size of the array <em>list</em>, corresponds to the number of logs retrieved
          format: int64
          example: 1
        list:
          type: array
          description: Array containing the different logs generated by the call (for example in case of transfer)
          items:
            $ref: "#/components/schemas/call"
    call:
      type: object
      properties:
        cdr_id:
          type: integer
          format: int64
          example: 19479175
        call_id:
          type: string
          example: '9058220947198957713'
        channel_id:
          type: string
          example: '9058220947198957713'
        type:
          type: string
          example: "PHONE"
        direction:
          type: string
          enum:
            - in
            - out
          example: "in"
        is_answered:
          type: boolean
        last_state:
          type: string
          enum:
            - CANCELLED
            - ANSWERED
            - MISSED
            - FAILED
            - QUEUE_TIMEOUT
            - BLIND_TRANSFERED
            - VOICEMAIL
            - PERMANENT_TRANSFERED
            - NOANSWER_TRANSFERED
            - FAX_RECEIVED
            - FAX_FAILED
            - FAX_OUT_SENT
            - INCORRECT_PINCODE
            - FAX_OUT_NOT_SENT
            - ANNOUNCE
          example: "VOICEMAIL"
          description: The enum regroups some samples
        start_time:
          type: string
          example: "2017-04-13T15:27:36+02:00"
        answered_time:
          type: string
          description: Can be null if call_type is `MISSED` in the query parameters
          example: "2017-04-13T15:27:46+02:00"
        end_time:
          type: string
          example: "2017-04-13T15:27:56+02:00"
        incall_duration:
          type: integer
          description: Can be null if call_type is `MISSED` in the query parameters
          example: 10
        total_duration:
          type: integer
          example: 20
        from_number:
          type: string
          example: '33600000000'
        to_number:
          type: string
          example: '33184800000'
        note:
          type: string
          example: "Potential client"
        star:
          type: string
          example: "STAR1"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/tag"
        voicemail:
          type: string
        record:
          type: string
          example: "https://cdn.ringover.com/records/0-0/35537d8679f3e2-13-04-19-15h27-33600000000-33180800000.mp3"
        fax:
          type: string
        user:
          $ref: "#/components/schemas/call_user_light"
          description: Can be null if call_type is `MISSED` in the query parameters
        contact:
          $ref: "#/components/schemas/contact"
        conference:
          $ref: "#/components/schemas/conference"
        ivr:
          $ref: "#/components/schemas/ivr_light"
        amd:
          type: boolean
          description: "Show OR exclude calls answered by a 'machine'"
        is_archived:
          type: integer
          description: "0 is for false, 1 is for true. There are other possible values but the concerned calls should not be accessible via this api"
        scenario_name:
          type: string
          description: name of the IVR scenario reached during an inbound call
        scenario_id:
          type: string
          description: id of the IVR scenario reached during an inbound call
        digits_entered:
          type: array
          items:
            type: string
        missed:
          type: string
        locations:
          type: string
        notes:
          type: object
        groups:
          type: array
          items:
            type: integer
    contact:
      type: object
      properties:
        contact_id:
          type: integer
          format: int64
          example: 654321
        is_shared:
          type: boolean
          example: true
        im_owner:
          type: string
        social_service:
          type:
            - string
            - 'null'
          example: null
        social_service_id:
          type: string
          example: 00P7U000015Ei75YBX
        social_profile_url:
          type:
            - string
            - 'null'
          example: null
        social_data:
          type:
            - string
            - 'null'
          example: null
        firstname:
          type: string
          example: "John"
        lastname:
          type: string
          example: "Do"
        company:
          type: string
          example: "DoeCompany"
        concat_name:
          type: string
          example: "John Doe"
        color:
          type: string
          example: "3CC8C8"
        initial:
          type: string
          example: "JD"
        profile_picture:
          type:
            - string
            - 'null'
          example: null
        creation_date:
          type: string
          format: date-time
          example: "2018-08-12T12:12:40.53Z"
        numbers:
          type:
            - array
            - 'null'
          items:
            type: integer
            format: uint64
            example: 331797500010
    calls_filter:
      type: object
      properties:
        filter:
          type:
            - string
            - 'null'
          description: "'ALL' filter displays all calls. 'DIRECT' filter does not display any IVR calls. 'IVR' filter displays all IVR calls. 'ADVANCED' filter allows you to define advanced filters."
          enum:
            - ALL
            - DIRECT
            - IVR
            - ADVANCED
          example: "ADVANCED"
        start_date:
          description: Used to create a time cursor. Must be used with end_date.
          type:
            - string
            - 'null'
          format: date-time
          example: "2020-06-27T00:00:00.53Z"
        end_date:
          description: Used to create a time cursor. Must be used with start_date and the difference between the start_date and the end_date must not exceed 15 days.
          type:
            - string
            - 'null'
          format: date-time
          example: "2020-06-27T00:00:00.53Z"
        ascending_order:
          description: "[Deprecated] The order of call logs"
          type: boolean
        call_type:
          description: "Used to filter certain types of calls. 'ANSWERED' filters answered calls. 'MISSED' filters missed calls. 'OUT' filters outgoing calls. 'VOICEMAIL' filters calls ending on voicemail."
          type:
            - array
            - 'null'
          example: [ "OUT" ]
          items:
            type: string
            enum:
              - ANSWERED
              - MISSED
              - OUT
              - VOICEMAIL
        advanced:
          description: Only used with advanced filter. Offer the possibility of filtering for specific IVR(s) or Group(s)/User(s).
          type:
            - object
            - 'null'
          properties:
            ivrs:
              description: |
                Used to filter calls for specific IVR(s).
              type:
                - array
                - 'null'
              items:
                $ref: "#/components/schemas/ivr_filter"
            groups:
              description: |
                Used to filter calls for specific Group(s).
              type:
                - array
                - 'null'
              items:
                type: integer
                format: int64
                example: 123456
            users:
              description: |
                Used to filter calls for specific User(s).
              type:
                - array
                - 'null'
              items:
                type: integer
                format: int64
                example: 123456
            ext_numbers:
              description: Used to filter external numbers (E164 without \'+\' format).
              type:
                - array
                - 'null'
              items:
                type: integer
                format: int64
                example: 33122334455
            int_numbers:
              description: Used to filter internal numbers (E164 without \'+\' format).
              type:
                - array
                - 'null'
              items:
                type: integer
                format: int64
                example: 33122114455
        stars:
          description: Used to filter stars ID
          type:
            - array
            - 'null'
          items:
            type: string
            enum:
              - STAR1
              - STAR2
              - STAR3
              - CHECK
              - WARNING
            example: "STAR1"
        contacts:
          description: Used to filter contacts ID
          type:
            - array
            - 'null'
          items:
            type: integer
            format: int64
            example: 123456
        tags:
          description: Used to filter tags ID
          type:
            - array
            - 'null'
          items:
            type: integer
            format: int64
            example: 123456
        out_planning:
          description: Show OR exclude calls received outside of working hours
          type:
            - boolean
            - 'null'
        no_digit:
          description: Show OR exclude calls where no digit was pressed
          type:
            - boolean
            - 'null'
        ringing:
          description: Show OR exclude inbound calls that did not ring to any user
          type:
            - boolean
            - 'null'
        note:
          description: Show OR exclude calls with note
          type:
            - boolean
            - 'null'
        tag:
          description: Show OR exclude calls with tag(s)
          type:
            - boolean
            - 'null'
        short:
          description: "Required: 'exclude_short_value > 0'. Show OR exclude the 'exclude_short_value' filter."
          type:
            - boolean
            - 'null'
        long:
          description: "Required: 'exclude_long_value > 0'. Show OR exclude the 'exclude_long_value' filter."
          type:
            - boolean
            - 'null'
        amd:
          description: "Show OR exclude outbound calls answered by a 'machine'"
          type:
            - boolean
            - 'null'
        exclude_short_value:
          description: Used to filter calls lasting under X seconds
          type:
            - integer
            - 'null'
          format: int64
          example: 10
        exclude_long_value:
          description: Used to filter calls lasting over X seconds
          type:
            - integer
            - 'null'
          format: int64
          example: 500
        limit_count:
          type:
            - integer
            - 'null'
          description: Used to create a pagination cursor
          format: int64
          maximum: 1000
          example: 100
        limit_offset:
          type:
            - integer
            - 'null'
          description: Used to create a pagination cursor. The max value of this field is 9000.
          format: int64
          example: 100
        last_id_returned:
          type:
            - integer
            - 'null'
          description: The request will return <b>cdr_id</b> (call logs) prior to this one
          format: int64
          example: 19479170
    ivr_filter:
      type: object
      properties:
        ivr_id:
          type: integer
          format: int64
          description: The identifier of the ivr
          example: 19479175
        numbers:
          type:
            - array
            - 'null'
          items:
            type: integer
            format: uint64
            example: 331797500010
        scenarios:
          type:
            - array
            - 'null'
          description: The identifier of the scenario
          items:
            type: integer
            format: int64
          example: [19479175, 19479176]
    current_calls_filter:
      type: object
      properties:
        status:
          type:
            - array
            - 'null'
          example: ["ANSWERED", "RINGING"]
          items:
            type: string
            enum:
              - ANSWERED
              - RINGING
        interface:
          type:
            - array
            - 'null'
          example: ["SIP", "MOBILE"]
          items:
            type: string
            enum:
              - WEBRTC
              - SIP
              - MOBILE
              - APP
        direction:
          type:
            - string
            - 'null'
          enum:
            - IN
            - OUT
        advanced:
          type:
            - object
            - 'null'
          description: Only used with advanced filter. Offer the possibility of filtering for specific IVR(s) or Group(s)/User(s).
          properties:
            ivrs:
              description: Cannot be combined with groups/user filters. Used to filter calls for specific IVR(s).
              type:
                - array
                - 'null'
              items:
                $ref: "#/components/schemas/ivr_filter"
            groups:
              description: Cannot be combined with ivr filters. Used to filter calls for specific Group(s).
              type:
                - array
                - 'null'
              items:
                type: integer
                format: int64
              example: null
            users:
              description: Cannot be combined with ivrs filters. Used to filter calls for specific User(s).
              type:
                - array
                - 'null'
              items:
                type: integer
                format: int64
              example: null
        limit_count:
          type:
            - integer
            - 'null'
          description: Used to create a pagination cursor
          format: int64
          maximum: 1000
          example: 1
        limit_offset:
          type:
            - integer
            - 'null'
          description: Used to create a pagination cursor
          format: int64
          example: 0
    current_calls_list:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          description: The identifier of the user
          example: 123456
        team_id:
          type: integer
          format: int64
          description: The identifier of the team
          example: 654321
        limit_offset_setted:
          type: integer
          format: int64
          example: 19479170
        limit_count_setted:
          type: integer
          format: int64
          example: 1
        total_current_calls_count:
          type: integer
          format: int64
          example: 54783
        current_calls_list_count:
          type: integer
          format: int64
          example: 1
        current_calls_list:
          type: array
          items:
            $ref: "#/components/schemas/current_call"
    current_call:
      type: object
      properties:
        call_id:
          type: string
          description: The identifier of the call
          example: '9058220947198957713'
        type:
          type: string
          description: The type of the call
          example: "USER_CALL"
        direction:
          type: string
          enum:
            - "IN"
            - "OUT"
          example: 'IN'
        user_id:
          type: integer
          format: uint32
          description: The identifier of the user
          example: 123456
        ivr_id:
          type: integer
          format: uint32
          description: The identifier of the ivr
          example: 234567
        from_number:
          type: string
          description: Unknown displays when someone uses a masked number.
          example: "Unknown"
        to_number:
          type: string
          example: '33123456789'
        interface:
          type:
            - string
            - 'null'
          enum:
            - "WEBRTC"
            - "SIP"
            - "MOBILE"
            - "APP"
          example: "APP"
        status:
          type:
            - string
            - 'null'
          enum:
            - "ANSWERED"
            - "RINGING"
          example: "ANSWERED"
        recording:
          type: boolean
          example: false
        mute:
          type: boolean
          example: false
        hold:
          type: boolean
          example: false
        channel_id:
          type: string
          description: UUID
          example: "d24da4f1-b267-4bb7-aea8-7f92296abe09"
        creation_date:
          type: string
          format: date-time
          example: "2018-08-12T12:12:40.53Z"
    event_transfer:
      type: object
      properties:
        phone_number:
          type: integer
          format: int64
          example: 33123456789
    event_dtmf:
      type: object
      properties:
        dtmf:
          description: possible value [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \#, *]
          type: string
          example: '0'
    number_light:
      type: object
      properties:
        number:
          type: integer
          example: 33184800000
        type:
          type: string
          example: PHONE
    contact_filter:
      type: object
      properties:
        pagination:
          type:
            - string
            - 'null'
          description: "[Deprecated] The character sequence assigned to pages in address book. Possible values are: 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '#' for any digit and '.' for any other characters. An empty value disables pagination. The pagination is based on the lastname by default, you can paginate by firstname or company name by combining the 'pagination' and 'alphabetical_order' fields."
          example: "a"
        alphabetical_order:
          description: |
            [Deprecated] Alphabetical order impacts the pagination value. Possible values are : FirstnameLastnameCompanyDESC, FirstnameLastnameCompanyASC, LastnameFirstnameCompanyDESC, LastnameFirstnameCompanyASC, CompanyFirstnameLastnameDESC, CompanyFirstnameLastnameASC ,CompanyLastnameFirstnameDESC, CompanyLastnameFirstnameASC.
            Values all respect the format 'Field1Field2Field3ORDER' where 'Field1' will be the field the pagination is based on and 'ORDER' the order of the result (Ascending or Descending)
          type:
            - string
            - 'null'
          example: "LastnameFirstnameCompanyASC"
        search:
          type:
            - string
            - 'null'
          description: "The keyword is used to search a specific contact. Index is based on firstname, lastname, company and phone number(s)."
          example: "Pierre De Test"
        limit_count:
          type:
            - integer
            - 'null'
          description: Restrict the number of returned rows, used to create a pagination cursor
          format: int64
          maximum: 500
          example: 10
        limit_offset:
          type:
            - integer
            - 'null'
          description: Number of elements that will be ignored, used to create a pagination cursor
          format: int64
          example: 10
    new_contact_request:
      type: object
      properties:
        contacts:
          type: array
          items:
            $ref: "#/components/schemas/new_contact"
          maxItems: 50
    new_contact:
      type: object
      properties:
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: Doe
        company:
          type: string
          example: DoeCompany
        is_shared:
          type: boolean
          example: false
        numbers:
          type: array
          items:
            $ref: "#/components/schemas/new_number_contact"
    new_number_contact:
      type: object
      properties:
        number:
          type: integer
          format: int64
          description: Phone number (E.164 format)
          example: 33184800000
        type:
          type: string
          enum:
            - home
            - office
            - mobile
            - fax
            - other
          example: "mobile"
    new_contact_response:
      type: array
      example: [123456]
      items:
        type: integer
        format: int64
    number_contact_list:
      type: array
      items:
        $ref: "#/components/schemas/new_number_contact"
    contact_list:
      type: object
      properties:
        list_count:
          type: integer
          format: int64
          example: 1
        user_id:
          type: integer
          format: int64
          example: 123456
        team_id:
          type: integer
          format: int64
          example: 123456
        limit_count_setted:
          type: integer
          format: int64
          example: 1
        limit_offset_setted:
          type: integer
          format: int64
          example: 0
        total_contact_count:
          type: integer
          format: int64
          description: This field is not used anymore.
          example: 0
        contact_list_count:
          type: integer
          format: int64
          example: 1
        contact_list:
          type: array
          items:
            $ref: "#/components/schemas/contact_full"
    transcriptions_object:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 88
        team_id:
          type: integer
          format: int64
          example: 16804
        user_id:
          type: integer
          format: int64
          example: 50907
        standard_id:
          type:
            - integer
            - 'null'
          format: int64
          example: null
        cdr_id:
          type: integer
          format: int64
          example: 991367
        call_id:
          type: string
          example: '11322631031026875934'
        channel_id:
          type: string
          example: '17857850318647956376'
        provider:
          type: string
          example: "SPEECH_CALLITY"
        user:
          $ref: "#/components/schemas/user_light"
        contact:
          description: |
            The non-user call member which can be <em>null</em> if not registered as a contact.
          $ref: "#/components/schemas/contact"
        transcription_data:
          type: object
          properties:
            duration:
              type: string
            num_channels:
              type: integer
            speeches:
              type: array
              items:
                type: object
                properties:
                  channelId:
                    type: integer
                    description: |
                      The identifier for the call members: the caller has the Channel ID <em>1</em>, and the callee has the Channel ID <em>0</em>.
                  start:
                    type: number
                  end:
                    type: number
                  duration:
                    type: number
                  text:
                    type: string
                  words:
                    type: array
                    items:
                      type: object
                      properties:
                        text:
                          type: string
                        start:
                          type: number
                        end:
                          type: number
                  named_entities:
                    type: array
                    items:
                      type: object
                      properties:
                        label:
                          type: string
                        text:
                          type: string
                        score:
                          type: number
                        start:
                          type: integer
                        end:
                          type: integer
            text:
              type: string
            prediction_time:
              type: number
        transcription_status:
          type: string
          example: "DONE"
        creation_date:
          type: string
          format: date-time
          example: "2018-06-12T23:23:40.99Z"
    transcription_list:
      type: array
      items:
        $ref: "#/components/schemas/transcriptions_object"
    moment:
      type: object
      properties:
        moment_id:
          type: integer
          format: int64
          example: 100000
        team_id:
          type: integer
          format: int64
          example: 100000
        label:
          type: string
        color:
          type: string
        emoji:
          type: string
        keywords:
          type: array
          items:
            $ref: '#/components/schemas/keyword'
        group_ids:
          type: array
          items:
            type: integer
            format: int64
        created_by:
          type: integer
          format: int64
        updated_by:
          type: integer
          format: int64
        creation_date:
          type: string
          format: date-time
        update_date:
          type: string
          format: date-time
    contact_full:
      type: object
      properties:
        contact_id:
          type: integer
          format: int64
          example: 654321
        is_shared:
          type: boolean
          example: true
        im_owner:
          type: boolean
          example: true
        social_service:
          type:
            - string
            - 'null'
          example: null
        social_service_id:
          type:
            - string
            - 'null'
          example: null
        social_profile_url:
          type:
            - string
            - 'null'
          example: null
        social_data:
          type:
            - string
            - 'null'
          example: null
        firstname:
          type: string
          example: "John"
        lastname:
          type: string
          example: "Doe"
        company:
          type: string
          example: "DoeCompany"
        concat_name:
          type: string
          example: "John Doe"
        color:
          type: string
          example: "3CC8C8"
        initial:
          type: string
          example: "JD"
        profile_picture:
          type: string
          example: "default.jpg"
        creation_date:
          type: string
          format: date-time
          example: "2018-06-12T23:23:40.99Z"
        numbers:
          type: array
          items:
            $ref: "#/components/schemas/number_light_with_format"
    number_light_with_format:
      allOf:
        - $ref: "#/components/schemas/number_light"
        - type: object
          properties:
            format:
              $ref: "#/components/schemas/format_number"
    conversation_list:
      type: object
      properties:
        team_id:
          type: integer
          format: int64
          example: 123456
        user_id:
          type: integer
          format: int64
          example: 654321
        filter:
          type: string
          enum:
            - ALL
            - INTERNAL
            - EXTERNAL
            - COLLABORATIVE
          example: "ALL"
        limit_offset_setted:
          type: integer
          format: int64
          example: 0
        limit_count_setted:
          type: integer
          format: int64
          example: 1
        total_conversation_count:
          type: integer
          format: int64
          example: 8
        conversation_list:
          type:
            - array
            - 'null'
          description: The list of conversations
          items:
            $ref: '#/components/schemas/conversation_light'
        conversation_list_count:
          type: integer
          format: int64
          example: 1
    conversation_light:
      type: object
      properties:
        conversation_id:
          type: integer
          format: int64
          example: 222111
        is_sms_write:
          type: boolean
          example: false
          description: True if the user can send an SMS in the conversation
        is_mms_write:
          type: boolean
          example: false
          description: True if the user can send an MMS in the conversation
        type:
          type: string
          enum:
            - INTERNAL
            - EXTERNAL
            - COLLABORATIVE
          example: "INTERNAL"
        tags:
          type: array
          items:
            type: string
          example:
            - tag1
            - tag2
        star:
          description: Used to filter stars ID
          type:
            - array
            - 'null'
          items:
            type: string
            enum:
              - STAR1
              - STAR2
              - STAR3
              - CHECK
              - WARNING
            example: "STAR1"
        favorite:
          type: boolean
          description: True if the user bookmarked the conversation
        name:
          type: string
          example: "My favorite conversation"
        purpose:
          type: string
          example: "Description of my favorite conversation"
        user_list:
          $ref: '#/components/schemas/conv_user_light'
        internal:
          type:
            - array
            - 'null'
          description: Store internal conversation members
          items:
            $ref: '#/components/schemas/member'
        external:
          type:
            - array
            - 'null'
          description: Store external conversation members (is not displayed in case of internal conversation)
          items:
            $ref: '#/components/schemas/member'
        unread_messages_count:
          type: integer
          format: int64
        last_message:
          $ref: '#/components/schemas/message'
        total_messages_count:
          type: integer
          format: int64
          example: 8
        is_archived:
          type: boolean
          example: false
          description: Archived (true) or not (false)
        adminrules:
          type: array
          items:
            $ref: '#/components/schemas/adminrulesitems'
          description: Permissions of the conversation's administrators (Chat only)
        can_thread_in:
          type: integer
          description: ID of the SMS conversation commented by the conversation
        is_commented_by:
          type: integer
          description: ID of the associated comment conversation
        unread_comment:
          type: integer
          description: Latest unread message of the conversation
        creation_date:
          type: string
          format: date-time
          example: "2018-06-12T23:23:40.99Z"
        update_date:
          type: string
          format: date-time
          example: "2019-02-12T12:20:50.52Z"
    adminrulesitems:
      type: object
      properties:
        can_invite:
          type: boolean
        can_leave:
          type: boolean
        can_kick:
          type: boolean
        can_join:
          type: boolean
        can_view_history:
          type: boolean
    member:
      type: object
      properties:
        conversation_user_id:
          type: integer
          format: int64
        user:
          description: Can be `null` (mutually exclusive with ivr and group)
          $ref: '#/components/schemas/member_ringover'
        ivr:
          description: Can be `null` (mutually exclusive with ivr and group). Always `null` if the conversation is not collaborative.
          $ref: '#/components/schemas/member_ivr'
        group:
          description: Can be `null` (mutually exclusive with ivr and group)
          type: object
          properties:
            id:
              type: integer
              format: int64
              description: The identifier of the group
              example: 999999
            name:
              type: string
              description: The name of the group
              example: "myIVR"
            color:
              type: string
              example: "FFD54F"
        alphanumeric:
          type:
            - string
            - 'null'
          description: Can be `null` if the `number` is filled
          example: null
        number:
          $ref: '#/components/schemas/format_number'
        contact:
          $ref: '#/components/schemas/contact'
        picture:
          type:
            - string
            - 'null'
          example: "https://my.image.com/default.jpg"
        is_administrator:
          type: boolean
    member_ringover:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          example: 654321
        initial:
          type: string
          example: "JD"
        color:
          type: string
          example: "3CC8C8"
        firstname:
          type: string
          example: "John"
        lastname:
          type: string
          example: "Doe"
        company:
          type: string
          example: "MyCompany"
        concat_name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "myemail@domain.com"
        picture:
          type: string
          example: "https://my.image.com/default.jpg"
        is_sms_write:
          description: is not displayed if the user does not have the `is_sms_write` right
          type: boolean
          example: true
        is_administrator:
          description: is not displayed if the user is not an administrator
          type: boolean
          example: true
    member_ivr:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 657657
        name:
          type: string
          example: "MyIVR"
        scenario_id:
          type: integer
          format: int64
          example: 777777
        color:
          type: string
          example: "FFD54F"
    message:
      type: object
      properties:
        message_id:
          type: integer
          format: int64
          example: 11223344
        mdr_uuid:
          type: string
          description: is displayed for external conversations
        thread:
          type: object
          properties:
            thread_uuid:
              type: string
            conversation_id_linked:
              type: integer
            conversation_sms_id_linked:
              type: integer
            nb_response:
              type: integer
            buffer_section:
              type: integer
        conversation_id:
          type: integer
        conversation_user_id:
          type: integer
        user:
          $ref: "#/components/schemas/user_light"
        contact:
          $ref: "#/components/schemas/contact"
        number:
          $ref: '#/components/schemas/format_number'
        buffer:
          type: string
          example: "Hello World"
          description: "Content of the message"
        total_price:
          type: integer
          description: Is `null` if the conversation is internal
        total_plan:
          type: integer
          description: Is `null` if the conversation is internal
        is_failed:
          type: boolean
          example: false
        nb_fragments:
          type: integer
          description: Depends on the number of characters sent
        direction:
          type:
            - string
            - 'null'
          enum:
            - IN
            - OUT
          example: "IN"
        is_archived:
          type: boolean
          example: false
        archive_date:
          type: string
          format: date-time
          example: "2019-03-11T12:20:50.52Z"
        creation_date:
          type: string
          format: date-time
          example: "2018-12-21T12:20:50.52Z"
        update_date:
          type: string
          format: date-time
          example: "2018-12-21T12:20:50.52Z"
    body_purpose:
      type: object
      properties:
        purpose:
          type: string
          example: "Description of my favorite conversation"
    member_list:
      type: object
      properties:
        conversation_id:
          type: integer
          format: int64
          example: 222111
        list_member:
          type:
            - array
            - 'null'
          description: This field is used when the flag marged is turn on
          items:
            $ref: '#/components/schemas/member'
        list_member_count:
          type:
            - integer
            - 'null'
          format: int64
          example: 1
        list_internal_member:
          type:
            - array
            - 'null'
          description: This field is used when the flag marged is turn off
          items:
            $ref: '#/components/schemas/member'
        list_internal_member_count:
          type:
            - integer
            - 'null'
          format: int64
          example: 0
        list_external_member:
          type:
            - array
            - 'null'
          description: This field is used when the flag marged is turn off
          items:
            $ref: '#/components/schemas/member'
        list_external_member_count:
          type:
            - integer
            - 'null'
          format: int64
          example: 0
    conversation_message_list:
      type: object
      properties:
        conversation_id:
          type: integer
          format: int64
          example: 222111
        is_sms_write:
          type: boolean
          example: false
          description: "Allows to send SMS"
        type:
          type: string
          enum:
            - INTERNAL
            - EXTERNAL
            - COLLABORATIVE
          example: "INTERNAL"
        name:
          type: string
          example: "My favorite conversation"
        purpose:
          type: string
          example: "Description of my favorite conversation"
        unread_messages_count:
          type: integer
          format: int64
        last_id_returned_setted:
          type: integer
          format: int64
          example: 0
        limit_count_setted:
          type: integer
          format: int64
          example: 1
        total_messages_count:
          type: integer
          format: int64
          example: 8
        message_list_count:
          type: integer
          format: int64
          example: 54
        message_list:
          type: array
          items:
            $ref: '#/components/schemas/message'
        is_archived:
          type: boolean
          example: false
          description: "Archived flag"
        creation_date:
          type: string
          format: date-time
          example: "2018-06-12T23:23:40.99Z"
        update_date:
          type: string
          format: date-time
          example: "2019-02-12T12:20:50.52Z"
    body_push_sms:
      type: object
      properties:
        archived_auto:
          type:
            - boolean
            - 'null'
          example: false
        from_number:
          type: string
          description: "International number format (E.164)"
          example: "+33744332211"
        to_number:
          type: string
          description: "International number format (E.164)"
          example: "+33611223344"
        content:
          type: string
          example: "Hello World!"
        user_id_forced:
          type: integer
          format: int64
          description: "(optional) force the userID of someone else in the team to send the SMS"
          example: 12345
    response_push_sms:
      type: object
      properties:
        message_id:
          type: integer
          format: int64
          example: 1234567
        conv_id:
          type: integer
          format: int64
          example: 23456
    body_oneway_sms:
      type: object
      properties:
        from_alphanum:
          type: string
          description: "Brand name that was created in your dashboard and validated by Ringover"
          example: "Ringover"
        to_number:
          type: integer
          description: "International number format (E.164)"
          example: 33611223344
        content:
          type: string
          example: "Hello World!"
        user_id:
          type: integer
          format: int64
          example: 12345
    response_oneway_sms:
      type: object
      properties:
        mdr_uuid:
          type: string
          example: "e10ef8d7-3b92-46e1-81e4-ea660f83fd47"
    profile:
      type: object
      properties:
        profile_id:
          type: integer
          format: int64
          example: 12
        name:
          type: string
          example: "MyProfile"
    profile_list:
      type: array
      items:
        $ref: "#/components/schemas/profile"
    users_presences:
      type: object
      properties:
        list_count:
          type: integer
          format: int64
          description: The size of the array <em>list</em>, corresponds to the number of presences retrieved
          example: 1
        list:
          type: array
          items:
            $ref: "#/components/schemas/user_presences"
    blacklist_list:
      type: object
      properties:
        team_id:
          type: integer
          format: int64
          description: Your team identifier
          example: 123456
        limit_offset_setted:
          type: integer
          format: int64
          description: "Number of elements that will be ignored (default: 0)."
          example: 1
        limit_count_setted:
          type: integer
          format: int64
          description: "The number of results (default: 100)."
          example: 10
        total_blacklist_count:
          type: integer
          format: int64
          description: The total number of blacklisted phone numbers
          example: 37
        blacklist_list_count:
          type: integer
          format: int64
          description: The size of the array <em>blacklist_list</em>, corresponds to the number of blacklisted phone numbers retrieved.
          example: 1
        blacklist_list:
          type: array
          items:
            $ref: "#/components/schemas/blacklist"
    blacklist:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          description: Your user identifier
          example: 12345
        team_id:
          type: integer
          format: int64
          description: Your team identifier
          example: 123456
        number:
          type: integer
          format: int64
          description: A blacklisted number
          example: 33184800000
        comment:
          type:
            - string
            - 'null'
          description: The comment about this blacklisted number, can be null.
          example: "Unfriendly"
        direction:
          type: string
          description: IN or OUT for blacklisted numbers (direction of the call)
          example: IN
    request_new_blacklist:
      type: object
      properties:
        number:
          type: integer
          format: int64
          description: Phone number (E.164 format) (mandatory)
          example: 33184800000
        comment:
          type:
            - string
            - 'null'
          description: A comment about this blacklisted number
          example: null
        direction:
          type: string
          description: IN (default value) or OUT for blacklisted numbers
          example: IN
    webhook_request_message:
      type: object
      properties:
        event:
          type: string
          enum:
            - sent
            - received
        resource:
          type: string
          example: "sms"
        timestamp:
          type: number
          format: double64
        data:
          type: object
          properties:
            id:
              type: string
              example: "1234567-234567"
            message_id:
              type: integer
              format: uint64
              example: 1234567
            conversation_id:
              type: integer
              format: uint64
              example: 234567
            time:
              type: number
              format: double64
            direction:
              type: string
              enum:
                - inbound
                - outbound
              example: inbound
            from_number:
              type: string
              example: '33601020304'
            to_number:
              type: string
              example: '33101020304'
            body:
              type: string
              example: "My SMS content..."
            is_internal:
              type: boolean
              example: false
            is_collaborative:
              type: boolean
              example: false
            user_id:
              type: integer
              format: uint64
              example: 1234567890987654321
        attempt:
          type: integer
          format: uint64
          example: 2
    callback_list:
      type: object
      properties:
        call_id:
          type: integer
          format: uint64
          example: 1234567890987654321
        channel_id:
          type: integer
          format: uint64
          example: 12345678909876543210
    webhook_request_smart_routing:
      type: object
      properties:
        event:
          type: string
          example: routing
        resource:
          type: string
          example: call
        timestamp:
          type: number
          format: double64
          example: 1554823493.762305
        data:
          type: object
          properties:
            call_id:
              type: integer
              format: uint64
              example: 1234567890987654321
            direction:
              type: string
              enum:
                - inbound
                - outbound
              example: inbound
            from_number:
              type: string
              example: '33601020304'
            to_number:
              type: string
              example: '33101020304'
    webhook_response_smart_routing:
      type: object
      required:
        - name
        - dispatch
        - start_delay
        - is_stay_not_connected
        - is_stay_in_call
        - is_stay_planned_snoozed
        - is_stay_snoozed
        - max_attempts
        - ring_overlap
        - agents
      properties:
        name:
          type: string
          example: redirections
        dispatch:
          type: string
          description: The method of dispatch used.
          enum:
            - random
            - topdown
            - ringall
            - history
          example: ringall
        max_attempts:
          type: integer
          format: int32
          description: The number of times the agent loop will be executed.
          example: 1
          minimum: 0
          maximum: 10
        start_delay:
          type: integer
          format: int32
          description: The delay before the first ring.
          example: 0
          minimum: 0
          maximum: 120
        is_stay_not_connected:
          type: boolean
          description:
            "If the agent is disconnected:<br />
            '0': Skip that agent and move on to the next one.<br />
            '1': Wait for the agent to log on and send them the call."
          example: true
        is_stay_in_call:
          type: boolean
          description:
            "If the agent already has a call in progress:<br />
            '0': Skip that agent and move on to the next one.<br />
            '1': Wait for the agent to finish and send them the call."
          example: false
        is_stay_planned_snoozed:
          type: boolean
          description:
            "If outside of the agent’s scheduled hours:<br />
            '0': Skip that agent and move on to the next one.<br />
            '1': Puts the caller on hold until the agent enters their scheduled hours then calls them."
          example: true
        is_stay_snoozed:
          description:
            "If the agent is in snooze:<br />
            '0': Skip that agent and move on to the next one.<br />
            '1': Puts the caller on hold until the agent's snooze period ends, then calls them."
          type: boolean
          example: false
        ring_overlap:
          type: integer
          description:
            "When the <em>ring_delay</em> of an agent ends and the next one is called, should we keep ringing the first one?<br />
            '0': No<br />
            '1': Yes"
          format: int32
          example: 0
        agents:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/agent_external'
              - $ref: '#/components/schemas/agent_internal_identified_by_number'
              - $ref: '#/components/schemas/agent_internal_identified_by_userid'
              - $ref: '#/components/schemas/agent_internal_identified_by_email'
            discriminator:
              propertyName: agent_type
    Agent:
      type: object
      properties:
        agent_type:
          description:
            "Agent type and identification means.<br />
            ⚠️ This field is used to explain how to use this object, BUT not need to put it."
          type: string
          example: agent_external
        ring_duration:
          type: integer
          format: int32
          description: "Ringing duration (in seconds)."
          example: 25
          minimum: 0
          maximum: 500
        ring_delay:
          type: integer
          format: int32
          description: "Waiting time before ringing (in seconds)."
          example: 0
          minimum: 0
          maximum: 500
        order:
          type: integer
          format: int32
          description: "Position in the queue of agents."
          example: 1
          minimum: 0
      discriminator:
        propertyName: agent_type
    agent_internal_identified_by_number:
      allOf:
        - $ref: '#/components/schemas/Agent'
        - type: object
          required:
            - number
          properties:
            number:
              type: integer
              format: uint64
              description: "Agent's phone number, in international format."
              example: 33123456789
    agent_internal_identified_by_email:
      allOf:
        - $ref: '#/components/schemas/Agent'
        - type: object
          required:
            - email
          properties:
            email:
              type: string
              description: "Agent's email."
              example: john.doe@ringover.com
    agent_internal_identified_by_userid:
      allOf:
        - $ref: '#/components/schemas/Agent'
        - type: object
          required:
            - user_id
          properties:
            user_id:
              type: integer
              format: int32
              description: "Agent's unique identifier."
              example: 31142
    agent_external:
      allOf:
        - $ref: '#/components/schemas/Agent'
        - type: object
          required:
            - number
          properties:
            number:
              type: integer
              format: uint64
              description: "Agent's phone number (international format)."
              example: 33123456789
            is_pre_answer:
              type: boolean
              description:
                "Does the agent need to confirm that they accept the call?
                '0': option deactivated, no confirmation needed<br />
                1 (default value): option activated, the agent needs to accept the call before taking it."
              example: false
            is_caller_id:
              type: boolean
              description:
                "Which number should we display to the agent?<br />
                '0': The IVR's number.<br />
                '1': The caller's number."
              example: true
            is_head_line:
              type: boolean
              description:
                "What should we do if this external agent is already in call?<br />
                '0': Wait for his call to end.<br />
                '1': Force the call (he will receive a dual call)."
              example: false
    webhook_request_contact:
      type: object
      properties:
        event:
          type: string
          example: "contact"
        resource:
          type: string
          example: "call"
        timestamp:
          type: number
          format: double64
          example: 1554823493.762305
        data:
          type: object
          properties:
            call_id:
              type: integer
              format: uint64
              example: 1234567890987654321
            direction:
              type: string
              enum:
                - inbound
                - outbound
              example: "inbound"
            from_number:
              type: string
              example: '33601020304'
            to_number:
              type: string
              example: '33101020304'
    webhook_response_contact:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          example: b55f949b-c49b-4354-b10a-c8c4cdbd8690
        firstname:
          type: string
          example: "Jean-Pierre"
        lastname:
          type: string
          example: "De La Court"
        company:
          type: string
          example: "Ringover"
        url:
          type: string
          example: "https://mycrm.com/client/18192233"
        data:
          type: object
          description: "Object for your personalized data."
          properties:
            key1:
              type: string
              example: "value1"
            key2:
              type: string
              example: "value2"
            keyN:
              type: string
              example: "valueN"
        is_shared:
          type: boolean
          example: true
    webhook_request_contactsearch:
      type: object
      properties:
        event:
          type: string
          example: "contact"
        ressource:
          type: string
          example: "search"
        timestamp:
          type: number
          format: double64
          example: 1554823493.762305
        data:
          type: object
          properties:
            query_search:
              type: string
              example: "Jean"
            user_id:
              type: integer
              format: uint64
              example: 123456
    webhook_response_contactsearch:
      type: array
      items:
        $ref: "#/components/schemas/webhook_response_contactsearch_object"
    webhook_response_contactsearch_object:
      type: object
      properties:
        firstname:
          type: string
          example: "Jean-Pierre"
        lastname:
          type: string
          example: "De La Court"
        company:
          type: string
          example: "Ringover"
        url:
          type: string
          example: "https://mycrm.com/client/18192233"
        numbers:
          type: array
          items:
            $ref: "#/components/schemas/search_number_contact"
    search_number_contact:
      type: object
      properties:
        number:
          type: integer
          description: Phone number (E.164 format)
          example: 33184800000
        type:
          type: string
          enum:
            - home
            - office
            - mobile
            - fax
            - other
          example: "mobile"
    webhook_request_call_ringing:
      type: object
      properties:
        event:
          type: string
          example: "ringing"
        resource:
          type: string
          example: "call"
        timestamp:
          type: number
          format: double64
          example: 1554823493.762305
        data:
          type: object
          properties:
            id:
              type: string
              example: "57622f20-a020-4f9e-814c-62a6123412fa"
            call_id:
              type: integer
              format: uint64
              example: 1234567890987654321
            channel_id:
              type: integer
              format: uint64
              example: 123456789
            start_time:
              type: number
              format: double64
              example: 1554823493.762305
            direction:
              type: string
              enum:
                - inbound
                - outbound
              example: "inbound"
            from_number:
              type: string
              example: '33601020304'
            to_number:
              type: string
              example: '33101020304'
            user_id:
              type: integer
              format: int64
              example: 12854321
            is_internal:
              type: boolean
              description: "The call is coming from an internal number."
              example: true
            is_anonymous:
              type: boolean
              example: false
            is_ivr:
              type: boolean
              description: "The call is coming from an IVR."
              example: true
            ivr_data:
              $ref: "#/components/schemas/webhook_ivr"
            user:
              type: object
              properties:
                user_id:
                  type: integer
                  format: uint64
                  example: 123456789
                firstname:
                  type: string
                  example: "Jean"
                lastname:
                  type: string
                  example: "Dupont"
                email:
                  type: string
                  example: "jean.dupont@ringover.com"
                photo:
                  type: string
                  example: "https://cdn.ringover.com/img/users/default.jpg"
            status:
              type: string
              example: "ringing"
        attempt:
          type: integer
          format: uint64
          example: 2
    webhook_ivr:
      type: object
      properties:
        number:
          type: string
          example: '33101020304'
        scenario_name:
          type: string
          example: "Opened"
        ivr_name:
          type: string
          example: "myIVR"
    webhook_request_call_answered:
      type: object
      properties:
        event:
          type: string
          example: "answered"
        resource:
          type: string
          example: "call"
        timestamp:
          type: number
          format: double64
          example: 1554823493.762305
        data:
          type: object
          properties:
            id:
              type: string
              example: "57622f20-a020-4f9e-814c-62a6123412fa"
            call_id:
              type: integer
              format: uint64
              example: 1234567890987654321
            channel_id:
              type: integer
              format: uint64
              example: 123456789
            status:
              type: string
              example: "answered"
            start_time:
              type: number
              format: double64
              example: 1554823400.762305
            direction:
              type: string
              enum:
                - inbound
                - outbound
              example: "inbound"
            from_number:
              type: string
              example: '33601020304'
            to_number:
              type: string
              example: '33101020304'
            user_id:
              type: integer
              format: int64
              example: 12854321
            is_internal:
              type: boolean
              example: true
            is_anonymous:
              type: boolean
              example: false
            is_ivr:
              type: boolean
              example: true
            ivr_data:
              $ref: "#/components/schemas/webhook_ivr"
            user:
              type: object
              properties:
                user_id:
                  type: integer
                  format: uint64
                  example: 123456789
                firstname:
                  type: string
                  example: "Jean"
                lastname:
                  type: string
                  example: "Dupont"
                email:
                  type: string
                  example: "jean.dupont@ringover.com"
                photo:
                  type: string
                  example: "https://cdn.ringover.com/img/users/default.jpg"
        attempt:
          type: integer
          format: uint64
          example: 2
    webhook_request_call_hangup:
      type: object
      properties:
        event:
          type: string
          example: "hangup"
        resource:
          type: string
          example: "call"
        timestamp:
          type: number
          format: double64
          example: 1554823493.762305
        data:
          type: object
          properties:
            id:
              type: string
              example: "57622f20-a020-4f9e-814c-62a6123412fa"
            call_id:
              type: integer
              format: uint64
              example: 1234567890987654321
            channel_id:
              type: integer
              format: uint64
              example: 123456789
            start_time:
              type: number
              format: double64
              example: 1554823400.762305
            hangup_time:
              type: number
              format: double64
              example: 1554823442.762305
            duration_in_seconds:
              type: integer
              format: int32
              example: 32
            record:
              description: Set only when the feature was activated
              type: string
              example: "https://cdr.ringover.com/record/myrecord.mp3"
            direction:
              type: string
              enum:
                - inbound
                - outbound
              example: "inbound"
            from_number:
              type: string
              example: '33601020304'
            to_number:
              type: string
              example: '33101020304'
            user_id:
              type: integer
              format: int64
              example: 12854321
            is_internal:
              type: boolean
              example: true
            is_anonymous:
              type: boolean
              example: false
            is_ivr:
              type: boolean
              example: true
            ivr_data:
              $ref: "#/components/schemas/webhook_ivr"
            user:
              type: object
              properties:
                user_id:
                  type: integer
                  format: uint64
                  example: 123456789
                firstname:
                  type: string
                  example: "Jean"
                lastname:
                  type: string
                  example: "Dupont"
                email:
                  type: string
                  example: "jean.dupont@ringover.com"
                photo:
                  type: string
                  example: "https://cdn.ringover.com/img/users/default.jpg"
        attempt:
          type: integer
          format: uint64
          example: 2
    webhook_request_call_missed:
      type: object
      properties:
        event:
          type: string
          example: "missed"
        resource:
          type: string
          example: "call"
        timestamp:
          type: number
          format: double64
          example: 1554823493.762305
        data:
          type: object
          properties:
            id:
              type: string
              example: "57622f20-a020-4f9e-814c-62a6123412fa"
            call_id:
              type: integer
              format: uint64
              example: 1234567890987654321
            start_time:
              type: number
              format: double64
              example: 1554823400.762305
            hangup_time:
              type: number
              format: double64
              example: 1554823442.762305
            direction:
              type: string
              enum:
                - inbound
                - outbound
              example: "inbound"
            from_number:
              type: string
              example: '33601020304'
            to_number:
              type: string
              example: '33101020304'
            user_id:
              type: integer
              format: int64
              example: 12854321
            is_internal:
              type: boolean
              example: true
            is_anonymous:
              type: boolean
              example: false
            is_ivr:
              type: boolean
              example: true
            ivr_data:
              $ref: "#/components/schemas/webhook_ivr"
            ivr:
              $ref: "#/components/schemas/webhook_ivr_v2"
            status:
              type: string
              example: "missed"
            reason:
              type: string
              example: "OUT_PLANNING"
        attempt:
          type: integer
          format: uint64
          example: 2
    webhook_request_call_voicemail:
      type: object
      properties:
        event:
          type: string
          example: "voicemail"
        resource:
          type: string
          example: "call"
        timestamp:
          type: number
          format: double64
          example: 1554823493.762305
        data:
          type: object
          properties:
            id:
              type: string
              example: "57622f20-a020-4f9e-814c-62a6123412fa"
            call_id:
              type: integer
              format: uint64
              example: 1234567890987654321
            start_time:
              type: number
              format: double64
              example: 1554823400.762305
            answered_time:
              type: number
              format: double64
              example: 1554823412.762305
            hangup_time:
              type: number
              format: double64
              example: 1554823442.762305
            duration_in_seconds:
              type: integer
              format: int32
              example: 32
            direction:
              type: string
              enum:
                - inbound
                - outbound
              example: "inbound"
            from_number:
              type: string
              example: '33601020304'
            to_number:
              type: string
              example: '33101020304'
            user_id:
              type: integer
              format: int64
              example: 12854321
            is_internal:
              type: boolean
              example: true
            is_anonymous:
              type: boolean
              example: false
            is_ivr:
              type: boolean
              example: true
            ivr_data:
              $ref: "#/components/schemas/webhook_ivr"
    webhook_request_call_comments_updated:
      type: object
      properties:
        event:
          type: string
          example: "comments_updated"
        resource:
          type: string
          example: "aftercall"
        timestamp:
          type: number
          format: double64
          example: 1554823493.762305
        data:
          type: object
          properties:
            call_id:
              type: integer
              format: uint64
              example: 1234567890987654321
            channel_id:
              type: integer
              format: uint64
              example: 123456789
            tags:
              type: array
              items:
                type: string
              example:
                - tag1
                - tag2
            comments:
              type: string
              description: New comment
        attempt:
          type: integer
          format: uint64
          example: 2
    webhook_request_call_tags_updated:
      type: object
      properties:
        event:
          type: string
          example: "tags_updated"
        resource:
          type: string
          example: "aftercall"
        timestamp:
          type: number
          format: double64
          example: 1554823493.762305
        data:
          type: object
          properties:
            call_id:
              type: integer
              format: uint64
              example: 1234567890987654321
            tags:
              type: array
              items:
                type: string
                example: tag1
    webhook_request_call_record_available:
      type: object
      properties:
        event:
          type: string
          example: "record_available"
        resource:
          type: string
          example: "aftercall"
        timestamp:
          type: number
          format: double64
          example: 1554823493.762305
        data:
          type: object
          properties:
            call_id:
              type: integer
              format: uint64
              example: 1234567890987654321
            record_link:
              type: string
              description: Link to record
            record_duration:
              type: string
              description: Duration
    webhook_request_call_voicemail_available:
      type: object
      properties:
        event:
          type: string
          example: "voicemail_available"
        resource:
          type: string
          example: "aftercall"
        timestamp:
          type: number
          format: double64
          example: 1554823493.762305
        data:
          type: object
          properties:
            call_id:
              type: integer
              format: uint64
              example: 1234567890987654321
            voicemail_link:
              type: string
              description: Link to voicemail
            voicemail_duration:
              type: string
              description: Duration
    webhook_request_ivr_response_code:
      type: object
      properties:
        event:
          type: string
          example: "ivr_response_code"
        resource:
          type: string
          example: "call"
        timestamp:
          type: number
          format: double64
          example: 1554823493.762305
        data:
          type: object
          properties:
            code:
              type: integer
              format: uint64
              example: 1234
            from_number:
              type: string
              example: '33601020304'
            to_number:
              type: string
              example: '33101020304'
            direction:
              type: string
              enum:
                - inbound
                - outbound
              example: "inbound"
            call_id:
              type: integer
              format: uint64
              example: 1234567890987654321
    webhook_request_summary_available:
      type: object
      properties:
        event:
          type: string
          example: "summary_available"
        resource:
          type: string
          example: "aftercall"
        timestamp:
          type: number
          format: double64
          example: 1554823493.762305
        data:
          type: object
          properties:
            call_id:
              type: integer
              format: uint64
              example: 1234567890987654400
            channel_id:
              type: integer
              format: uint64
              example: 1234567890987654422
            summary:
              type: string
              example: "summary of the call transcription"
    webhook_request_transcription_available:
      type: object
      properties:
        event:
          type: string
          example: "transcription_available"
        resource:
          type: string
          example: "aftercall"
        timestamp:
          type: number
          format: double64
          example: 1554823493.762305
        data:
          type: object
          properties:
            call_id:
              type: integer
              format: uint64
              example: 1234567890987654400
            channel_id:
              type: integer
              format: uint64
              example: 1234567890987654422
            transcription_url:
              type: string
              example: "https://cdn.ringover.com/transcriptions/1543234/babel_transcription_9876583_9836567853109470_56215056789765.json"
    SalesforceIntegration:
      type: object
      properties:
        object:
          type: string
          example: "Opportunity"
        object_id:
          type: string
          example: "SF_ID"
    Integrations:
      type: object
      properties:
        salesforce:
          $ref: '#/components/schemas/SalesforceIntegration'
    request_ivr_callback:
      type: object
      properties:
        from_number:
          description: The IVR Number to display
          type: integer
          format: int64
          example: 33744332211
        clir:
          type: boolean
          description: "Calling line identification restriction: The CLIR service blocks calling party address information from being presented to the called user."
          example: false
        to_number:
          type: integer
          format: int64
          example: 33611223344
        timeout:
          type: integer
          format: int64
          minimum: 20
          maximum: 300
          description: "Number of seconds before the call is aborted if the communication isn't etablished."
          example: 45
        integrations:
          $ref: '#/components/schemas/Integrations'
    request_callback:
      type: object
      properties:
        from_number:
          type:
            - integer
            - 'null'
          description: If from_number is not defined, default number is used
          format: int64
          example: 33744332211
        to_number:
          type: integer
          format: int64
          example: 33611223344
        timeout:
          type: integer
          format: int64
          minimum: 20
          maximum: 300
          description: "Number of seconds before abort the call if the communication isn't etablished."
          example: 45
        device:
          type: string
          enum:
            - ALL
            - APP
            - WEB
            - SIP
            - MOB
            - EXT
          example: "ALL"
        clir:
          type: boolean
          description: "Calling line identification restriction: The CLIR service blocks calling party address information from being presented to the called user."
          example: false
    snooze_label:
      type: object
      properties:
        name:
          type: string
          example: "name"
        label:
          type: string
          example: "label"
        label_fr:
          type: string
          example: "label"
        label_en:
          type: string
          example: "label"
        label_es:
          type: string
          example: "label"
        color:
          type: string
          example: "CDCDCD"
    snooze_log_list:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          example: 234234
        team_id:
          type: integer
          format: int64
          example: 234234
        last_id_offset_setted:
          description: The request will return <b>cdr_id</b> (call logs) prior to this one
          type: integer
          format: int64
          example: 19479170
        limit_count_setted:
          type: integer
          format: int64
          example: 1
        snooze_log_list_count:
          type: integer
          description: The size of the array <em>list</em>, corresponds to the number of logs retrieved
          format: int64
          example: 1
        snooze_log_list:
          type: array
          description: Array containing the snooze logs
          items:
            $ref: "#/components/schemas/snooze_log"
        total_snooze_log_count:
          type: integer
          description: The total number of snooze logs
          format: int64
          example: 1337
    snooze_log:
      type: object
      properties:
        state:
          type: string
          example: "state"
        name:
          type: string
          example: "name"
        label:
          type: string
          example: "label"
        label_fr:
          type: string
          example: "label"
        label_en:
          type: string
          example: "label"
        label_es:
          type: string
          example: "label"
        comment:
          type: string
          example: "a comment"
        creation_date:
          type: string
          format: date-time
          example: "2018-08-12T12:12:40.53Z"
        end_date:
          type: string
          format: date-time
          example: "2018-08-12T12:12:40.53Z"
    callEmpower:
      type: object
      properties:
        call_uuid:
          type: string
          format: uuid
        call_id:
          type: string
        channel_id:
          type: string
        external_id:
          type: string
        audio_url:
          type: string
        video_url:
          type: string
        audio_duration:
          type: number
          format: double
        call_direction:
          type: string
        call_source:
          type: string
        favorite:
          type: boolean
        title:
          type: string
        call_date:
          type: string
          format: date-time
        creation_date:
          type: string
          format: date-time
        language:
          type: string
        state:
          type: string
        moments:
          type: array
          items:
            $ref: '#/components/schemas/moment'
        speakers:
          type: array
          items:
            $ref: '#/components/schemas/speaker'
        tags_ids:
          type: array
          items:
            type: integer
            format: int64
        transcription_url:
          type: string
        summary_url:
          type: string
        waveform_url:
          type: string
        recap_url:
          type: string
        manager_rating:
          type: integer
          enum: [1,2,3,4,5]
        platform_name:
          type: string
        duration:
          type: integer
        num_channels:
          type: integer
        dead_air:
          type: integer
        moods:
          type: array
          items:
            $ref: '#/components/schemas/mood'
        notes:
          type: array
          items:
            $ref: '#/components/schemas/note'
        visited:
          type: integer
        last_visited:
          type: string
          format: date-time
    note:
      type: object
      properties:
        note_id:
          type: integer
        user_id:
          type: integer
        message:
          type: string
        creation_date:
          type: string
          format: date-time
        update_date:
          type: string
          format: date-time
    mood:
      type: object
      properties:
        mood_id:
          type: integer
          format: int64
        mood_score:
          type: number
          format: double
          example: 0.198754
        mood_label:
          type: string
        segment_id:
          type: integer
          format: int64
    recap:
      type: object
      properties:
        summary:
          type: object
          properties:
            french:
              type: string
            english:
              type: string
            spanish:
              type: string
        type:
          type: string
        importance:
          type: boolean
        importance_score:
          type: integer
        review_reasons:
          type: array
          items:
            type: string
        call_rating:
          type: integer
        politeness_professionalism:
          type: boolean
        call_reasons:
          type: array
          items:
            type: string
        pain_points:
          type: array
          items:
            type: string
        follow_up_actions:
          type: array
          items:
            type: string
        resolutions_steps:
          type: array
          items:
            type: string
        call_outcome:
          type: string
        customer_sentiment:
          type: string
        salles_opportunities:
          type: array
          items:
            type: string
        language:
          type: string
    speaker:
      type: object
      properties:
        phone_number:
          type: number
          format: int64
        channel_index:
          type: number
          format: int64
        user_id:
          type: number
          format: int64
        mood_score:
          type: number
          format: double
        speech_time:
          type: number
          format: double
        words_rate:
          type: number
          format: double
        longest_monologue:
          type: number
          format: double
        number_of_pauses_within_speech:
          type: number
          format: int64
        average_duration_of_pauses_within_speech:
          type: number
          format: double
        number_of_pauses_between_speakers:
          type: number
          format: int64
        average_duration_of_pauses_between_speakers:
          type: number
          format: double
        number_of_interruptions:
          type: number
          format: int64
        number_of_questions:
          type: number
          format: int64
        creation_date:
          type: string
          format: date-time
        update_date:
          type: string
          format: date-time
        interruptions:
          type: object
          properties:
            segment_id:
              type: number
              format: int64
        speaker_type:
          type: string
          enum: [client, agent]
        mood_label:
          type: string
    keyword:
      type: object
      properties:
        keyword_id:
          type: integer
          format: int64
          example: 100000
        label:
          type: string
        language:
          type: string
        segment_id:
          type: integer
          format: int64
        created_by:
          type: integer
          format: int64
        creation_date:
          type: string
          format: date-time
    summary:
      type: object
      properties:
        extractive:
          type: array
          items:
            type: object
            properties:
              index:
                type: number
                format: int64
              text:
                type: string
              channelID:
                type: number
                format: int64
        keywords:
          type: array
          items:
            type: object
            properties:
              score:
                type: number
                format: double
              text:
                type: string
    demo_summary_response:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        data:
          type: string
        creation_date:
          type: string
          format: date-time
    getCallEmpowerResBody:
      type: object
      properties:
        call_uuid:
          type: string
          format: uuid
        call_id:
          type: string
        channel_id:
          type: string
        external_id:
          type: string
        audio_url:
          type: string
        video_url:
          type: string
        audio_duration:
          type: number
          format: double
        call_direction:
          type: string
        call_source:
          type: string
        favorite:
          type: boolean
        title:
          type: string
        call_date:
          type: string
          format: date-time
        creation_date:
          type: string
          format: date-time
        language:
          type: string
        state:
          type: string
        moments:
          type: array
          items:
            $ref: '#/components/schemas/moment'
        speakers:
          type: array
          items:
            $ref: '#/components/schemas/speaker'
        tags_ids:
          type: array
          items:
            type: integer
            format: int64
        transcription_url:
          type: string
        summary_url:
          type: string
        waveform_url:
          type: string
        recap_url:
          type: string
        manager_rating:
          type: integer
          enum: [1,2,3,4,5]
        platform_name:
          type: string
        duration:
          type: integer
        num_channels:
          type: integer
        dead_air:
          type: integer
        notes:
          type: array
          items:
            $ref: '#/components/schemas/note'
        visited:
          type: integer
        last_visited:
          type: string
          format: date-time
    campaign_call_start:
      type: object
      properties:
        start_date:
          type: string
          description: Schedule the campaign
          example: "2022-01-13T17:59:05Z"
    campaign_calllist_basic:
      type: object
      properties:
        campaign_calllist_uuid:
          type: string
          format: uuid
          description: Unique identifier for the object
          example: b55f949b-c49b-4354-b10a-c8c4cdbd8690
        team_id:
          type: integer
          format: int64
          description: Team identifier
          example: 123123
        user_id:
          type: integer
          format: int64
          description: User identifier
          example: 234234
        name:
          type: string
          description: The name of the campaign CALL List
          example: "My campaign CALL List"
        campaign_tags:
          type: array
          description: tags of the campaign
          items:
            type: integer
            format: int64
        users_list:
          type: array
          description: The list of users
          items:
            type: integer
            format: int64
        groups_list:
          type: array
          description: The list of groups
          items:
            type: integer
            format: int64
        fifo_left_to_call:
          type: integer
          format: int64
          description: The number of numbers left to call
          example: 8
        update_date:
          type: string
          format: date-time
          example: "2018-08-12T12:12:40.53Z"
        creation_date:
          type: string
          format: date-time
          example: "2018-08-12T12:12:40.53Z"
        deletion_date:
          type: string
          format: date-time
          example: "2018-08-12T12:12:40.53Z"
        max_retry:
          type: integer
          description: The max retry attempts for numbers in the campaign CALL List
          example: 3
        retry_time:
          type: integer
          description: Optional time in seconds to wait before retrying a number
          example: 200
          default: 3600
        ivr_id:
          type: integer
          description: Optional id of the ivr
          example: 200
        start_date:
          type: string
          format: date-time
          description: Optional start date of the campaign
          example: "2018-08-12T12:12:40.53Z"
    campaign_calllist_light:
      allOf:
        - $ref: "#/components/schemas/campaign_calllist_basic"
        - type: object
          properties:
            campaign_count_numbers:
              type: integer
              format: int64
              example: 50
            campaign_count_active_numbers:
              type: integer
              format: int64
              example: 10
            campaign_count_users:
              type: integer
              format: int64
              example: 5
            campaign_count_groups:
              type: integer
              format: int64
              example: 7
            is_private:
              type: boolean
              description: true if the campaign call is private
              example: false
            is_running:
              type: boolean
              description: true if the campaign call is currently running
              example: false
            stop_reason:
              type: string
              description: the reason why the campaign call has been stopped
              example: "no more numbers to call"
            ivr_id:
              type: integer
              description: Optional id of the ivr
              example: 200
            script:
              description: Optional script for the campaign
              $ref: "#/components/schemas/campaign_call_script"
    campaign_call_script:
      type: object
      properties:
        script_uuid:
          type: string
          description: The identifier of the script
          format: uuid
          example: "1a7a5639-3818-4b0e-9285-f6b3795f8db4"
        generic_uuid:
          type: string
          format: uuid
          example: "1a7a5639-3818-4b0e-9285-f6b3795f8db4"
        name:
          type: string
          description: The name of the script
          example: "My script"
        data:
          type: string
        is_enabled:
          type: boolean
          description: true if the script is enabled
          example: true
    campaign_calllist_full:
      allOf:
        - $ref: "#/components/schemas/campaign_calllist_light"
        - type: object
          properties:
            total_numbers_list_count:
              type: integer
              format: int64
              example: 8
            total_archive_logs:
              type: integer
              format: int64
              description: The size of archive log array
              example: 1
            archive_logs:
              type: array
              items:
                $ref: "#/components/schemas/campaign_calllist_archive_logs"
            total_start_logs:
              type: integer
              format: int64
              description: The size of start log array
              example: 1
            start_logs:
              type: array
              items:
                $ref: "#/components/schemas/campaign_calllist_start_logs"
    campaign_calllist_archive_logs:
      type: object
      properties:
        team_id:
          type: integer
          format: int64
          example: 123123
        archived_by_user_id:
          type: integer
          format: int64
          example: 123123
        unarchived_by_user_id:
          type: integer
          format: int64
          example: 123123
        archived_start_date:
          type: string
          format: date-time
          example: "2018-08-12T12:12:40.53Z"
        unarchived_start_date:
          type: string
          format: date-time
          example: "2018-08-14T11:13:41.53Z"
    campaign_calllist_start_logs:
      type: object
      properties:
        team_id:
          type: integer
          format: int64
          example: 123123
        started_by_user_id:
          type: integer
          format: int64
          example: 123123
        stopped_by_user_id:
          type: integer
          format: int64
          example: 123123
        start_date:
          type: string
          format: date-time
          example: "2018-08-12T12:12:40.53Z"
        stop_date:
          type: string
          format: date-time
          example: "2018-08-14T11:13:41.53Z"
    campaign_calllist_list:
      type: object
      properties:
        team_id:
          type: integer
          format: int64
          example: 123123
        user_id:
          type: integer
          format: int64
          example: 234234
        limit_offset_setted:
          type: integer
          format: int64
          example: 0
        limit_count_setted:
          type: integer
          format: int64
          example: 1
        campaign_calllist_list:
          type:
            - array
            - 'null'
          description: The list of all campaigns calllist (including archived and stopped)
          items:
            $ref: "#/components/schemas/campaign_calllist_light"
        campaign_calllist_list_count:
          type: integer
          format: int64
          description: The count of all campaigns calllist (including archived and stopped)
          example: 1
        total_team_campaigns:
          type: integer
          format: int64
          description: Total of campaigns (not archived) by a given team
    campaign_calllist_add_numbers:
      type: object
      properties:
        to_numbers:
          type: array
          items:
            type: object
            properties:
              to_number:
                type: integer
                format: e164
                example: 33612345678
              json_csv_infos:
                type: string
                format: json
                description: |
                  Contains data related to the number.
                  json_csv_infos must follow the schema:
                    {"company": "", "firstname": "", "lastname": "", "social_data": [{"optionalField": ""}, ...]}
                  The fields "company", "firstname", "lastname" and "social_data" are required.
                  The field "social_data" is an array of objects, each containing a key-value pair of type string.
                  All numbers' json_csv_infos must have the same fields in "social_data".
                example: '{"company": "Ringover", "firstname": "John", "lastname": "Doe", "social_data": [{"country": "FR"}, {"city": "Paris"}]}'
    campaign_calllist_numbers:
      type: object
      properties:
        number_id:
          type: integer
          format: int64
          example: 123123
        campaign_calllist_uuid:
          type: string
          format: uuid
          example: "b55f949b-c49b-4354-b10a-c8c4cdbd8690"
        to_number:
          type: integer
          format: e164
        to_number_format:
          $ref: '#/components/schemas/format_number'
        retry:
          type: integer
          format: int64
          example: 0
        max_retry:
          type: integer
          format: int64
          example: 3
        done_date:
          type: string
          format: date-time
          example: "2018-08-14T11:13:41.53Z"
        creation_date:
          type: string
          format: date-time
          example: "2018-08-12T12:12:40.53Z"
        scheduled_callback_date:
          type: string
          format: date-time
          example: "2018-08-12T12:12:40.53Z"
        call_by_user_id:
          type: integer
          format: int64
          example: 123123
        call_id:
          type: integer
          format: int64
          example: 123123
        json_csv_infos:
          type: string
          format: json
          description: |
            Contains data related to the number.
            json_csv_infos must follow the schema:
              {"company": "", "firstname": "", "lastname": "", "social_data": [{"optionalField": ""}, ...]}
            The fields "company", "firstname", "lastname" and "social_data" are required.
            The field "social_data" is an array of objects, each containing a key-value pair of type string.
            All numbers' json_csv_infos must have the same fields in "social_data".
          example: '{"company": "Ringover", "firstname": "John", "lastname": "Doe", "social_data": [{"country": "FR"}, {"city": "Paris"}]}'
    campaign_calllist_add_numbers_response:
      type: object
      properties:
        numbers_added_in_queue:
          description: The list of added phone numbers
          type: array
          items:
            $ref: '#/components/schemas/number_resp'
        numbers_already_in_queue:
          description: The list of phone numbers that were already in queue
          type: array
          items:
            $ref: '#/components/schemas/number_resp'
    number_resp:
      type: object
      properties:
        to_number:
          type: integer
          format: e164
    campaign_calllist_numbers_list:
      allOf:
        - $ref: "#/components/schemas/campaign_calllist_light"
        - type: object
          properties:
            limit_offset_setted:
              type: integer
              format: int64
              example: 0
            limit_count_setted:
              type: integer
              format: int64
              example: 1
            total_numbers_list_count:
              type: integer
              format: int64
              example: 8
            numbers_list:
              type:
                - array
                - 'null'
              description: The list of campaign calllist numbers
              items:
                $ref: "#/components/schemas/campaign_calllist_numbers"
            numbers_list_len:
              type: integer
              format: int64
              example: 1
    campaign_calllist_numbers_add_columns:
      type: object
      description: Add column to the campaign calllist numbers. If no value is specified for a number, it will be added with an empty value
      properties:
        name:
          description: Name of the column to add
          type: string
        numbers_data:
          description: Map of values for each number. If no value is specified for a number, it will be added with an empty value
          type: object
          additionalProperties:
            type: string
          example:
            '33622222222': Hello!
            '33622222211': Bonjour!
      required:
        - name
    campaign_calllist_number_rename_column:
      type: object
      properties:
        old_name:
          description: Name of the column to rename
          type: string
        new_name:
          description: New column name
          type: string
      required:
        - old_name
        - new_name
    campaign_calllist_number_switch_column:
      type: object
      properties:
        column1:
          $ref: "#/components/schemas/campaign_calllist_number_column"
        column2:
          $ref: "#/components/schemas/campaign_calllist_number_column"
    campaign_calllist_number_column:
      type: object
      properties:
        name:
          description: column name
          type: string
        in_social_data:
          description: in or out of field social_data
          type: boolean
      required:
        - name
    campaign_calllist_groups_list:
      allOf:
        - $ref: "#/components/schemas/campaign_calllist_light"
        - type: object
          properties:
            limit_offset_setted:
              type: integer
              format: int64
              example: 0
            limit_count_setted:
              type: integer
              format: int64
              example: 1
            total_groups_list_count:
              type: integer
              format: int64
              example: 8
            groups_list:
              type:
                - array
                - 'null'
              description: The list of campaign calllist
              items:
                $ref: "#/components/schemas/campaign_calllist_groups"
            groups_list_len:
              type: integer
              format: int64
              example: 1
    campaign_calllist_groups:
      type: object
      properties:
        campaign_calllist_uuid:
          type: string
          format: uuid
          example: "b55f949b-c49b-4354-b10a-c8c4cdbd8690"
        group_id:
          type: integer
          format: int64
          example: 123123
        creation_date:
          type: string
          format: date-time
          example: "2018-08-12T12:12:40.53Z"
    campaign_calllist_users_list:
      allOf:
        - $ref: "#/components/schemas/campaign_calllist_light"
        - type: object
          properties:
            limit_offset_setted:
              type: integer
              format: int64
              example: 0
            limit_count_setted:
              type: integer
              format: int64
              example: 1
            total_users_list_count:
              type: integer
              format: int64
              example: 8
            users_list:
              type:
                - array
                - 'null'
              description: The list of campaign calllist
              items:
                $ref: "#/components/schemas/campaign_calllist_users"
            users_list_len:
              type: integer
              format: int64
              example: 1
    campaign_calllist_users:
      type: object
      properties:
        campaign_calllist_uuid:
          type: string
          format: uuid
          example: "b55f949b-c49b-4354-b10a-c8c4cdbd8690"
        user_id:
          type: integer
          format: int64
          example: 123123
        creation_date:
          type: string
          format: date-time
          example: "2018-08-12T12:12:40.53Z"
    campaign_calllist_groups_create:
      type: object
      properties:
        to_groups:
          type: array
          items:
            type: integer
            format: int64
            description: The identifier of group
            example: 1
    campaign_calllist_groups_create_response:
      type: object
      properties:
        groups_added_in_queue:
          description: The list of added groups
          type: array
          items:
            type: integer
        groups_already_in_queue:
          description: The list of groups that were already in queue
          type: array
          items:
            type: integer
    campaign_calllist_groups_delete_response:
      type: object
      properties:
        groups_deleted_from_queue:
          description: The list of deleted groups
          type: array
          items:
            type: integer
        groups_not_in_queue:
          description: The list of groups that were not in queue
          type: array
          items:
            type: integer
    logs:
      type: object
      properties:
        campaign_calllist_uuid:
          type: string
        team_id:
          type: integer
        user_id:
          type: integer
        log_type:
          type: string
          description: Says on what kind of operation the logging is performed
        action_type:
          type: string
          description: create, add, delete, ...
        creation_date:
          type: string
          format: date-time
          example: "2018-08-12T12:12:40.53Z"
        meta_datas:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    whatsapp_conversation_list:
      type: object
      properties:
        limit_offset_setted:
          type: integer
          format: int64
          example: 0
        limit_count_setted:
          type: integer
          format: int64
          example: 1
        total_conversation_count:
          type: integer
          format: int64
          example: 8
        conversation_list_count:
          type: integer
          format: int64
          example: 1
        conversation_list:
          type: array
          items:
            $ref: "#/components/schemas/whatsapp_conversation"
    whatsapp_conversation:
      type: object
      properties:
        account_name:
          type: string
          example: "Whatsapp Account"
        account_namespace:
          type: string
          example: "6bf15414_2a1e_4fb7_908a_e3dcba477054"
        account_number:
          type: integer
          example: 123456789
        account_uuid:
          type: string
          format: uuid
          example: "63960521-fa29-11ed-abf8-002590bb0d88"
        application_id:
          type: string
          format: uuid
          example: "d282b8a1-7f70-444a-8645-ec3fa6103e29"
        creation_date:
          type: string
          format: date-time
          example: "2024-06-11T06:47:15.776738Z"
        external_number:
          type: object
          properties:
            alphanumeric:
              type: string
              example: ""
            number:
              type: integer
              example: 124356789
        internal_number:
          type: object
          properties:
            alphanumeric:
              type: string
              example: "Sophien RO"
            number:
              type: integer
              example: 123456789
        is_archived:
          type: boolean
          example: false
        is_favorite:
          type: boolean
          example: false
        last_message:
          type: object
          properties:
            OCost:
              type: integer
              example: 0
            Orate:
              type: integer
              example: 0
            creation_date:
              type: string
              format: date-time
              example: "2025-02-20T12:41:31.635066Z"
            data:
              type: string
              example: "Hello"
            direction:
              type: string
              example: "out"
            failed_cause:
              type:
                - string
                - 'null'
              example: null
            is_failed:
              type: boolean
              example: false
            schedule_date:
              type:
                - string
                - 'null'
              format: date-time
              example: null
            status:
              type: string
              example: "DELIVERED"
            update_date:
              type: string
              format: date-time
              example: "2025-02-20T12:41:34.641784Z"
            user_id:
              type: integer
              example: 1
            uuid:
              type: string
              format: uuid
              example: "43b319d0-d601-4c23-b0e7-6c08e7472cce"
        last_message_data:
          type: string
          example: "Hello"
        note_count:
          type: integer
          example: 2
        star:
          type:
            - string
            - 'null'
          example: null
        status:
          type: string
          example: "active"
        team_id:
          type: integer
          example: 1
        unread_message_count:
          type: integer
          example: 0
        unread_note_count:
          type: integer
          example: 0
        update_date:
          type: string
          format: date-time
          example: "2025-02-20T12:41:31.635066Z"
        uuid:
          type: string
          format: uuid
          example: "a06cac2f-364b-4537-931f-f191def09587"
        waba_id:
          type: string
          example: '105771022534126'
        window_start_date:
          type: string
          format: date-time
          example: "2025-02-19T13:00:35.517608Z"
    whatsapp_account_list:
      type: array
      items:
        $ref: "#/components/schemas/whatsapp_account"
    whatsapp_account:
      type: object
      properties:
        account_name:
          type: string
          example: "Account"
        account_namespace:
          type: string
          example: "6bf15414_2a1e_4fb7_908a_e3dcba477054"
        account_number:
          type: integer
          example: 123456789
        account_uuid:
          type: string
          format: uuid
          example: "62960521-fa29-11ed-abf8-002590bb0d88"
        application_id:
          type: string
          format: uuid
          example: "d282b4a1-7f70-444a-8645-ec3fa6103e29"
        creation_date:
          type: string
          format: date-time
          example: "2023-05-24T11:51:58.973281Z"
        status:
          type: string
          example: "ACTIVATED"
        team_id:
          type: integer
          example: 1
        update_date:
          type: string
          format: date-time
          example: "2024-04-16T15:22:14.326989Z"
        users:
          type: array
          items:
            type: integer
            example: 1
        uuid:
          type: string
          format: uuid
          example: "63960521-fa29-11ed-abf8-002590bb0d88"
        waba_id:
          type: string
          example: '12253324126'
    whatsapp_template_list:
      type: array
      items:
        type: object
        properties:
          account_uuid:
            type: string
            format: uuid
            example: "a662d1fb-4e9c-4ea6-84b3-12e68c419457"
          content:
            type: string
            example: "Hello There."
          creation_date:
            type: string
            format: date-time
            example: "2025-01-30T12:12:28.156134Z"
          status:
            type: string
            example: "active"
          template_uuid:
            type: string
            format: uuid
            example: "a662d1fb-4e4c-4ea6-84b3-12e68c419497"
          title:
            type: string
            example: "hello"
    task:
      type: object
      properties:
        teamId:
          type: integer
          format: int32
        userId:
          type: integer
          format: int32
        type_id:
          type: integer
          format: int32
          example: 1
        data:
          type: string
          format: nullable
        details:
          type: string
          format: nullable
        type:
          type: string
          format: nullable
          example: "type1"
        priority:
          type: integer
          format: int32
        createdBy:
          type: integer
          format: int32
        status:
          type: string
          format: nullable
          example: "PENDING"
        scheduledDate:
          type: string
          format: date-time
          example: "2018-08-12T12:12:40.53Z"
        deletionDate:
          type: string
          format: date-time
          example: "2018-08-12T12:12:40.53Z"
    create_task_batch:
      type: object
      properties:
        type:
          type: string
          format: nullable
          example: "type1"
        data:
          type: string
          format: nullable
        status:
          type: string
          format: nullable
          example: "IN_PROGRESS, PENDING, DONE, DELETED"
        details:
          type: string
          format: nullable
        priority:
          type: integer
          format: int32
          example: 2
        scheduled_date:
          type: string
          format: date-time
        numbers:
          type: array
          items:
            type: string
        call_uuid:
          type: string
          format: uuid
    team_task_request:
      type: object
      properties:
        type:
          type: string
        status:
          type: array
          items:
            type: string
        group_ids:
          type: array
          items:
            type: integer
        user_ids:
          type: array
          items:
            type: integer
        creation_date_start:
          type: string
        creation_date_end:
          type: string
        limit_count:
          type: integer
        limit_offset:
          type: integer
        order_by:
          type: string
        order_direction:
          type: string
    ChatHistoryItem:
      type: object
      properties:
        role:
          type: string
          description: "Role of the message sender (e.g., 'assistant' or 'user')."
        content:
          type: string
          description: "Content of the message."
      required:
        - role
        - content
